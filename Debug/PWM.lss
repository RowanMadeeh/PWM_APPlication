
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001f76  0000200a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800068  00800068  00002012  2**0
                  ALLOC
  3 .stab         000019b0  00000000  00000000  00002014  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e12  00000000  00000000  000039c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000047d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004916  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004a86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000066cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000075ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008368  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000084c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008755  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008f23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <__vector_10>
      2c:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ab 37       	cpi	r26, 0x7B	; 123
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e7       	ldi	r30, 0x76	; 118
      78:	ff e1       	ldi	r31, 0x1F	; 31
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <main>
      8a:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 82 0f 	jmp	0x1f04	; 0x1f04 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 82 0f 	jmp	0x1f04	; 0x1f04 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 92 0f 	jmp	0x1f24	; 0x1f24 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ae 0f 	jmp	0x1f5c	; 0x1f5c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MGIE_voidenable>:
#include "../../LIB/BIT_MATH.h"

#define GIE_SREG_Reg *((volatile u8*)0x5F)

void MGIE_voidenable()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(GIE_SREG_Reg,7);
     b4e:	af e5       	ldi	r26, 0x5F	; 95
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <MGIE_voiddisable>:
void MGIE_voiddisable()
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit(GIE_SREG_Reg,7);
     b6a:	af e5       	ldi	r26, 0x5F	; 95
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ef e5       	ldi	r30, 0x5F	; 95
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	8c 93       	st	X, r24
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <MEXTI_voidsense_control>:
#define EXTI_GIFR *((volatile u8*)0x5A)



void MEXTI_voidsense_control(u8 A_u8EXTI_line,u8 A_u8EXTI_sense)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	2a 97       	sbiw	r28, 0x0a	; 10
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	cd bf       	out	0x3d, r28	; 61
     b92:	89 83       	std	Y+1, r24	; 0x01
     b94:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8EXTI_line)
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	28 2f       	mov	r18, r24
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	3a 87       	std	Y+10, r19	; 0x0a
     b9e:	29 87       	std	Y+9, r18	; 0x09
     ba0:	89 85       	ldd	r24, Y+9	; 0x09
     ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba4:	81 30       	cpi	r24, 0x01	; 1
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <MEXTI_voidsense_control+0x2e>
     baa:	66 c0       	rjmp	.+204    	; 0xc78 <MEXTI_voidsense_control+0xfa>
     bac:	29 85       	ldd	r18, Y+9	; 0x09
     bae:	3a 85       	ldd	r19, Y+10	; 0x0a
     bb0:	22 30       	cpi	r18, 0x02	; 2
     bb2:	31 05       	cpc	r19, r1
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <MEXTI_voidsense_control+0x3a>
     bb6:	bb c0       	rjmp	.+374    	; 0xd2e <MEXTI_voidsense_control+0x1b0>
     bb8:	89 85       	ldd	r24, Y+9	; 0x09
     bba:	9a 85       	ldd	r25, Y+10	; 0x0a
     bbc:	00 97       	sbiw	r24, 0x00	; 0
     bbe:	09 f0       	breq	.+2      	; 0xbc2 <MEXTI_voidsense_control+0x44>
     bc0:	d5 c0       	rjmp	.+426    	; 0xd6c <MEXTI_voidsense_control+0x1ee>
	{
		case EXTI_line0:
			switch(A_u8EXTI_sense)
     bc2:	8a 81       	ldd	r24, Y+2	; 0x02
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	38 87       	std	Y+8, r19	; 0x08
     bca:	2f 83       	std	Y+7, r18	; 0x07
     bcc:	8f 81       	ldd	r24, Y+7	; 0x07
     bce:	98 85       	ldd	r25, Y+8	; 0x08
     bd0:	81 30       	cpi	r24, 0x01	; 1
     bd2:	91 05       	cpc	r25, r1
     bd4:	21 f1       	breq	.+72     	; 0xc1e <MEXTI_voidsense_control+0xa0>
     bd6:	2f 81       	ldd	r18, Y+7	; 0x07
     bd8:	38 85       	ldd	r19, Y+8	; 0x08
     bda:	22 30       	cpi	r18, 0x02	; 2
     bdc:	31 05       	cpc	r19, r1
     bde:	2c f4       	brge	.+10     	; 0xbea <MEXTI_voidsense_control+0x6c>
     be0:	8f 81       	ldd	r24, Y+7	; 0x07
     be2:	98 85       	ldd	r25, Y+8	; 0x08
     be4:	00 97       	sbiw	r24, 0x00	; 0
     be6:	61 f0       	breq	.+24     	; 0xc00 <MEXTI_voidsense_control+0x82>
     be8:	c1 c0       	rjmp	.+386    	; 0xd6c <MEXTI_voidsense_control+0x1ee>
     bea:	2f 81       	ldd	r18, Y+7	; 0x07
     bec:	38 85       	ldd	r19, Y+8	; 0x08
     bee:	22 30       	cpi	r18, 0x02	; 2
     bf0:	31 05       	cpc	r19, r1
     bf2:	21 f1       	breq	.+72     	; 0xc3c <MEXTI_voidsense_control+0xbe>
     bf4:	8f 81       	ldd	r24, Y+7	; 0x07
     bf6:	98 85       	ldd	r25, Y+8	; 0x08
     bf8:	83 30       	cpi	r24, 0x03	; 3
     bfa:	91 05       	cpc	r25, r1
     bfc:	71 f1       	breq	.+92     	; 0xc5a <MEXTI_voidsense_control+0xdc>
     bfe:	b6 c0       	rjmp	.+364    	; 0xd6c <MEXTI_voidsense_control+0x1ee>
			{
				case EXTI_lowlevel:
					Clr_Bit(EXTI_MCUCR,0);
     c00:	a5 e5       	ldi	r26, 0x55	; 85
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e5 e5       	ldi	r30, 0x55	; 85
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	8e 7f       	andi	r24, 0xFE	; 254
     c0c:	8c 93       	st	X, r24
					Clr_Bit(EXTI_MCUCR,1);
     c0e:	a5 e5       	ldi	r26, 0x55	; 85
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e5 e5       	ldi	r30, 0x55	; 85
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	8d 7f       	andi	r24, 0xFD	; 253
     c1a:	8c 93       	st	X, r24
     c1c:	a7 c0       	rjmp	.+334    	; 0xd6c <MEXTI_voidsense_control+0x1ee>
					break;

				case EXTI_onchange:
					Set_Bit(EXTI_MCUCR,0);
     c1e:	a5 e5       	ldi	r26, 0x55	; 85
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e5 e5       	ldi	r30, 0x55	; 85
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	81 60       	ori	r24, 0x01	; 1
     c2a:	8c 93       	st	X, r24
					Clr_Bit(EXTI_MCUCR,1);
     c2c:	a5 e5       	ldi	r26, 0x55	; 85
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	e5 e5       	ldi	r30, 0x55	; 85
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	8d 7f       	andi	r24, 0xFD	; 253
     c38:	8c 93       	st	X, r24
     c3a:	98 c0       	rjmp	.+304    	; 0xd6c <MEXTI_voidsense_control+0x1ee>
					break;

				case EXTI_falling:
					Clr_Bit(EXTI_MCUCR,0);
     c3c:	a5 e5       	ldi	r26, 0x55	; 85
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	e5 e5       	ldi	r30, 0x55	; 85
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	8e 7f       	andi	r24, 0xFE	; 254
     c48:	8c 93       	st	X, r24
					Set_Bit(EXTI_MCUCR,1);
     c4a:	a5 e5       	ldi	r26, 0x55	; 85
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	e5 e5       	ldi	r30, 0x55	; 85
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	82 60       	ori	r24, 0x02	; 2
     c56:	8c 93       	st	X, r24
     c58:	89 c0       	rjmp	.+274    	; 0xd6c <MEXTI_voidsense_control+0x1ee>
					break;

				case EXTI_rising:
					Set_Bit(EXTI_MCUCR,0);
     c5a:	a5 e5       	ldi	r26, 0x55	; 85
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e5 e5       	ldi	r30, 0x55	; 85
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	81 60       	ori	r24, 0x01	; 1
     c66:	8c 93       	st	X, r24
					Set_Bit(EXTI_MCUCR,1);
     c68:	a5 e5       	ldi	r26, 0x55	; 85
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e5 e5       	ldi	r30, 0x55	; 85
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	82 60       	ori	r24, 0x02	; 2
     c74:	8c 93       	st	X, r24
     c76:	7a c0       	rjmp	.+244    	; 0xd6c <MEXTI_voidsense_control+0x1ee>
					break;
			}
			break;

		case EXTI_line1:
			switch(A_u8EXTI_sense)
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	28 2f       	mov	r18, r24
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	3e 83       	std	Y+6, r19	; 0x06
     c80:	2d 83       	std	Y+5, r18	; 0x05
     c82:	8d 81       	ldd	r24, Y+5	; 0x05
     c84:	9e 81       	ldd	r25, Y+6	; 0x06
     c86:	81 30       	cpi	r24, 0x01	; 1
     c88:	91 05       	cpc	r25, r1
     c8a:	21 f1       	breq	.+72     	; 0xcd4 <MEXTI_voidsense_control+0x156>
     c8c:	2d 81       	ldd	r18, Y+5	; 0x05
     c8e:	3e 81       	ldd	r19, Y+6	; 0x06
     c90:	22 30       	cpi	r18, 0x02	; 2
     c92:	31 05       	cpc	r19, r1
     c94:	2c f4       	brge	.+10     	; 0xca0 <MEXTI_voidsense_control+0x122>
     c96:	8d 81       	ldd	r24, Y+5	; 0x05
     c98:	9e 81       	ldd	r25, Y+6	; 0x06
     c9a:	00 97       	sbiw	r24, 0x00	; 0
     c9c:	61 f0       	breq	.+24     	; 0xcb6 <MEXTI_voidsense_control+0x138>
     c9e:	66 c0       	rjmp	.+204    	; 0xd6c <MEXTI_voidsense_control+0x1ee>
     ca0:	2d 81       	ldd	r18, Y+5	; 0x05
     ca2:	3e 81       	ldd	r19, Y+6	; 0x06
     ca4:	22 30       	cpi	r18, 0x02	; 2
     ca6:	31 05       	cpc	r19, r1
     ca8:	21 f1       	breq	.+72     	; 0xcf2 <MEXTI_voidsense_control+0x174>
     caa:	8d 81       	ldd	r24, Y+5	; 0x05
     cac:	9e 81       	ldd	r25, Y+6	; 0x06
     cae:	83 30       	cpi	r24, 0x03	; 3
     cb0:	91 05       	cpc	r25, r1
     cb2:	71 f1       	breq	.+92     	; 0xd10 <MEXTI_voidsense_control+0x192>
     cb4:	5b c0       	rjmp	.+182    	; 0xd6c <MEXTI_voidsense_control+0x1ee>
			{
				case EXTI_lowlevel:
					Clr_Bit(EXTI_MCUCR,2);
     cb6:	a5 e5       	ldi	r26, 0x55	; 85
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e5 e5       	ldi	r30, 0x55	; 85
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	8b 7f       	andi	r24, 0xFB	; 251
     cc2:	8c 93       	st	X, r24
					Clr_Bit(EXTI_MCUCR,3);
     cc4:	a5 e5       	ldi	r26, 0x55	; 85
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e5 e5       	ldi	r30, 0x55	; 85
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	87 7f       	andi	r24, 0xF7	; 247
     cd0:	8c 93       	st	X, r24
     cd2:	4c c0       	rjmp	.+152    	; 0xd6c <MEXTI_voidsense_control+0x1ee>
					break;

				case EXTI_onchange:
					Set_Bit(EXTI_MCUCR,2);
     cd4:	a5 e5       	ldi	r26, 0x55	; 85
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e5 e5       	ldi	r30, 0x55	; 85
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	84 60       	ori	r24, 0x04	; 4
     ce0:	8c 93       	st	X, r24
					Clr_Bit(EXTI_MCUCR,3);
     ce2:	a5 e5       	ldi	r26, 0x55	; 85
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e5 e5       	ldi	r30, 0x55	; 85
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	87 7f       	andi	r24, 0xF7	; 247
     cee:	8c 93       	st	X, r24
     cf0:	3d c0       	rjmp	.+122    	; 0xd6c <MEXTI_voidsense_control+0x1ee>
					break;

				case EXTI_falling:
					Clr_Bit(EXTI_MCUCR,2);
     cf2:	a5 e5       	ldi	r26, 0x55	; 85
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e5 e5       	ldi	r30, 0x55	; 85
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	8b 7f       	andi	r24, 0xFB	; 251
     cfe:	8c 93       	st	X, r24
					Set_Bit(EXTI_MCUCR,3);
     d00:	a5 e5       	ldi	r26, 0x55	; 85
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e5 e5       	ldi	r30, 0x55	; 85
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	88 60       	ori	r24, 0x08	; 8
     d0c:	8c 93       	st	X, r24
     d0e:	2e c0       	rjmp	.+92     	; 0xd6c <MEXTI_voidsense_control+0x1ee>
					break;

				case EXTI_rising:
					Set_Bit(EXTI_MCUCR,2);
     d10:	a5 e5       	ldi	r26, 0x55	; 85
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e5 e5       	ldi	r30, 0x55	; 85
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	84 60       	ori	r24, 0x04	; 4
     d1c:	8c 93       	st	X, r24
					Set_Bit(EXTI_MCUCR,3);
     d1e:	a5 e5       	ldi	r26, 0x55	; 85
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e5 e5       	ldi	r30, 0x55	; 85
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	88 60       	ori	r24, 0x08	; 8
     d2a:	8c 93       	st	X, r24
     d2c:	1f c0       	rjmp	.+62     	; 0xd6c <MEXTI_voidsense_control+0x1ee>
					break;
			}
			break;

		case EXTI_line2:
			switch(A_u8EXTI_sense)
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	3c 83       	std	Y+4, r19	; 0x04
     d36:	2b 83       	std	Y+3, r18	; 0x03
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	9c 81       	ldd	r25, Y+4	; 0x04
     d3c:	82 30       	cpi	r24, 0x02	; 2
     d3e:	91 05       	cpc	r25, r1
     d40:	31 f0       	breq	.+12     	; 0xd4e <MEXTI_voidsense_control+0x1d0>
     d42:	2b 81       	ldd	r18, Y+3	; 0x03
     d44:	3c 81       	ldd	r19, Y+4	; 0x04
     d46:	23 30       	cpi	r18, 0x03	; 3
     d48:	31 05       	cpc	r19, r1
     d4a:	49 f0       	breq	.+18     	; 0xd5e <MEXTI_voidsense_control+0x1e0>
     d4c:	0f c0       	rjmp	.+30     	; 0xd6c <MEXTI_voidsense_control+0x1ee>
			{
				case EXTI_falling:
					Clr_Bit(EXTI_MCUCSR,6);
     d4e:	a4 e5       	ldi	r26, 0x54	; 84
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e4 e5       	ldi	r30, 0x54	; 84
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	8f 7b       	andi	r24, 0xBF	; 191
     d5a:	8c 93       	st	X, r24
     d5c:	07 c0       	rjmp	.+14     	; 0xd6c <MEXTI_voidsense_control+0x1ee>
					break;

				case EXTI_rising:
					Set_Bit(EXTI_MCUCSR,6);
     d5e:	a4 e5       	ldi	r26, 0x54	; 84
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e4 e5       	ldi	r30, 0x54	; 84
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	80 64       	ori	r24, 0x40	; 64
     d6a:	8c 93       	st	X, r24
					break;
			}
			break;
	}
}
     d6c:	2a 96       	adiw	r28, 0x0a	; 10
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	08 95       	ret

00000d7e <MEXTI_voidenable>:
void MEXTI_voidenable(u8 A_u8EXTI_line)
{
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	00 d0       	rcall	.+0      	; 0xd84 <MEXTI_voidenable+0x6>
     d84:	0f 92       	push	r0
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8EXTI_line)
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	3b 83       	std	Y+3, r19	; 0x03
     d94:	2a 83       	std	Y+2, r18	; 0x02
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	9b 81       	ldd	r25, Y+3	; 0x03
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	91 05       	cpc	r25, r1
     d9e:	89 f0       	breq	.+34     	; 0xdc2 <MEXTI_voidenable+0x44>
     da0:	2a 81       	ldd	r18, Y+2	; 0x02
     da2:	3b 81       	ldd	r19, Y+3	; 0x03
     da4:	22 30       	cpi	r18, 0x02	; 2
     da6:	31 05       	cpc	r19, r1
     da8:	a1 f0       	breq	.+40     	; 0xdd2 <MEXTI_voidenable+0x54>
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	9b 81       	ldd	r25, Y+3	; 0x03
     dae:	00 97       	sbiw	r24, 0x00	; 0
     db0:	b9 f4       	brne	.+46     	; 0xde0 <MEXTI_voidenable+0x62>
	{
		case EXTI_line0: Set_Bit(EXTI_GICR,6);break;
     db2:	ab e5       	ldi	r26, 0x5B	; 91
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e5       	ldi	r30, 0x5B	; 91
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	80 64       	ori	r24, 0x40	; 64
     dbe:	8c 93       	st	X, r24
     dc0:	0f c0       	rjmp	.+30     	; 0xde0 <MEXTI_voidenable+0x62>
		case EXTI_line1: Set_Bit(EXTI_GICR,7);break;
     dc2:	ab e5       	ldi	r26, 0x5B	; 91
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	eb e5       	ldi	r30, 0x5B	; 91
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	80 68       	ori	r24, 0x80	; 128
     dce:	8c 93       	st	X, r24
     dd0:	07 c0       	rjmp	.+14     	; 0xde0 <MEXTI_voidenable+0x62>
		case EXTI_line2: Set_Bit(EXTI_GICR,5);break;
     dd2:	ab e5       	ldi	r26, 0x5B	; 91
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	eb e5       	ldi	r30, 0x5B	; 91
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	80 62       	ori	r24, 0x20	; 32
     dde:	8c 93       	st	X, r24
	}
}
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <MEXTI_voiddisable>:
void MEXTI_voiddisable(u8 A_u8EXTI_line)
{
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <MEXTI_voiddisable+0x6>
     df2:	0f 92       	push	r0
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8EXTI_line)
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	3b 83       	std	Y+3, r19	; 0x03
     e02:	2a 83       	std	Y+2, r18	; 0x02
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	9b 81       	ldd	r25, Y+3	; 0x03
     e08:	81 30       	cpi	r24, 0x01	; 1
     e0a:	91 05       	cpc	r25, r1
     e0c:	89 f0       	breq	.+34     	; 0xe30 <MEXTI_voiddisable+0x44>
     e0e:	2a 81       	ldd	r18, Y+2	; 0x02
     e10:	3b 81       	ldd	r19, Y+3	; 0x03
     e12:	22 30       	cpi	r18, 0x02	; 2
     e14:	31 05       	cpc	r19, r1
     e16:	a1 f0       	breq	.+40     	; 0xe40 <MEXTI_voiddisable+0x54>
     e18:	8a 81       	ldd	r24, Y+2	; 0x02
     e1a:	9b 81       	ldd	r25, Y+3	; 0x03
     e1c:	00 97       	sbiw	r24, 0x00	; 0
     e1e:	b9 f4       	brne	.+46     	; 0xe4e <MEXTI_voiddisable+0x62>
	{
		case EXTI_line0: Clr_Bit(EXTI_GICR,6);break;
     e20:	ab e5       	ldi	r26, 0x5B	; 91
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	eb e5       	ldi	r30, 0x5B	; 91
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	8f 7b       	andi	r24, 0xBF	; 191
     e2c:	8c 93       	st	X, r24
     e2e:	0f c0       	rjmp	.+30     	; 0xe4e <MEXTI_voiddisable+0x62>
		case EXTI_line1: Clr_Bit(EXTI_GICR,7);break;
     e30:	ab e5       	ldi	r26, 0x5B	; 91
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	eb e5       	ldi	r30, 0x5B	; 91
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	8f 77       	andi	r24, 0x7F	; 127
     e3c:	8c 93       	st	X, r24
     e3e:	07 c0       	rjmp	.+14     	; 0xe4e <MEXTI_voiddisable+0x62>
		case EXTI_line2: Clr_Bit(EXTI_GICR,5);break;
     e40:	ab e5       	ldi	r26, 0x5B	; 91
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	eb e5       	ldi	r30, 0x5B	; 91
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	8f 7d       	andi	r24, 0xDF	; 223
     e4c:	8c 93       	st	X, r24
	}
}
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <MTIMERS_voidinit>:
static void (*G_Time_ovf)(void);
static void (*G_Time_ctc)(void);
static u32 G_u32Inteval_counter;

void MTIMERS_voidinit(u8 TIMER)
{
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	00 d0       	rcall	.+0      	; 0xe60 <MTIMERS_voidinit+0x6>
     e60:	0f 92       	push	r0
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	89 83       	std	Y+1, r24	; 0x01
	switch(TIMER)
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	3b 83       	std	Y+3, r19	; 0x03
     e70:	2a 83       	std	Y+2, r18	; 0x02
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	9b 81       	ldd	r25, Y+3	; 0x03
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	91 05       	cpc	r25, r1
     e7a:	c1 f0       	breq	.+48     	; 0xeac <MTIMERS_voidinit+0x52>
     e7c:	2a 81       	ldd	r18, Y+2	; 0x02
     e7e:	3b 81       	ldd	r19, Y+3	; 0x03
     e80:	22 30       	cpi	r18, 0x02	; 2
     e82:	31 05       	cpc	r19, r1
     e84:	81 f1       	breq	.+96     	; 0xee6 <MTIMERS_voidinit+0x8c>
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	9b 81       	ldd	r25, Y+3	; 0x03
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	d1 f5       	brne	.+116    	; 0xf02 <MTIMERS_voidinit+0xa8>
				Clr_Bit(TCCR0,WGM00);
			#elif TIMER0_MODE == TIMER_CTC
				Set_Bit(TCCR0,WGM01);
				Clr_Bit(TCCR0,WGM00);
			#elif TIMER0_MODE == TIMER_FASTPWM
				Set_Bit(TCCR0,WGM01);
     e8e:	a3 e5       	ldi	r26, 0x53	; 83
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e3 e5       	ldi	r30, 0x53	; 83
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	88 60       	ori	r24, 0x08	; 8
     e9a:	8c 93       	st	X, r24
				Set_Bit(TCCR0,WGM00);
     e9c:	a3 e5       	ldi	r26, 0x53	; 83
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e3 e5       	ldi	r30, 0x53	; 83
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	80 64       	ori	r24, 0x40	; 64
     ea8:	8c 93       	st	X, r24
     eaa:	2b c0       	rjmp	.+86     	; 0xf02 <MTIMERS_voidinit+0xa8>
                Clr_Bit(TCCR1A, WGM10);
                Clr_Bit(TCCR1A, WGM11);
                Clr_Bit(TCCR1B, WGM12);
                Set_Bit(TCCR1B, WGM13);
            #elif TIMER1_MODE == TIMER_FASTPWM
                Clr_Bit(TCCR1B, WGM13);
     eac:	ae e4       	ldi	r26, 0x4E	; 78
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	ee e4       	ldi	r30, 0x4E	; 78
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	8f 7e       	andi	r24, 0xEF	; 239
     eb8:	8c 93       	st	X, r24
                Clr_Bit(TCCR1A, WGM11);
     eba:	af e4       	ldi	r26, 0x4F	; 79
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	ef e4       	ldi	r30, 0x4F	; 79
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	8d 7f       	andi	r24, 0xFD	; 253
     ec6:	8c 93       	st	X, r24
                Set_Bit(TCCR1B, WGM12);
     ec8:	ae e4       	ldi	r26, 0x4E	; 78
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	ee e4       	ldi	r30, 0x4E	; 78
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	88 60       	ori	r24, 0x08	; 8
     ed4:	8c 93       	st	X, r24
                Set_Bit(TCCR1A, WGM10);
     ed6:	af e4       	ldi	r26, 0x4F	; 79
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	ef e4       	ldi	r30, 0x4F	; 79
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	81 60       	ori	r24, 0x01	; 1
     ee2:	8c 93       	st	X, r24
     ee4:	0e c0       	rjmp	.+28     	; 0xf02 <MTIMERS_voidinit+0xa8>
                Clr_Bit(TCCR2, WGM21);
            #elif TIMER2_MODE == TIMER_CTC
                Clr_Bit(TCCR2, WGM20);
                Set_Bit(TCCR2, WGM21);
            #elif TIMER2_MODE == TIMER_FASTPWM
                Set_Bit(TCCR2, WGM20);
     ee6:	a5 e4       	ldi	r26, 0x45	; 69
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e5 e4       	ldi	r30, 0x45	; 69
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	80 64       	ori	r24, 0x40	; 64
     ef2:	8c 93       	st	X, r24
                Set_Bit(TCCR2, WGM21);
     ef4:	a5 e4       	ldi	r26, 0x45	; 69
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e5 e4       	ldi	r30, 0x45	; 69
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	88 60       	ori	r24, 0x08	; 8
     f00:	8c 93       	st	X, r24
		default:
			break;
	}


}
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <MTIMERS_voidSet_intervals_OVF>:

void MTIMERS_voidSet_intervals_OVF(u8 A_u8TIMER_ID,u16 A_u16Interval_counts, void (*A_funptr)(void))
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	00 d0       	rcall	.+0      	; 0xf14 <MTIMERS_voidSet_intervals_OVF+0x6>
     f14:	00 d0       	rcall	.+0      	; 0xf16 <MTIMERS_voidSet_intervals_OVF+0x8>
     f16:	0f 92       	push	r0
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	89 83       	std	Y+1, r24	; 0x01
     f1e:	7b 83       	std	Y+3, r23	; 0x03
     f20:	6a 83       	std	Y+2, r22	; 0x02
     f22:	5d 83       	std	Y+5, r21	; 0x05
     f24:	4c 83       	std	Y+4, r20	; 0x04
	G_u32Inteval_counter= A_u16Interval_counts;
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	9b 81       	ldd	r25, Y+3	; 0x03
     f2a:	cc 01       	movw	r24, r24
     f2c:	a0 e0       	ldi	r26, 0x00	; 0
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	80 93 74 00 	sts	0x0074, r24
     f34:	90 93 75 00 	sts	0x0075, r25
     f38:	a0 93 76 00 	sts	0x0076, r26
     f3c:	b0 93 77 00 	sts	0x0077, r27
	G_Time_ovf=A_funptr;
     f40:	8c 81       	ldd	r24, Y+4	; 0x04
     f42:	9d 81       	ldd	r25, Y+5	; 0x05
     f44:	90 93 71 00 	sts	0x0071, r25
     f48:	80 93 70 00 	sts	0x0070, r24

	//start timer
	MTIMERS_voidStart(A_u8TIMER_ID);
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	0e 94 53 08 	call	0x10a6	; 0x10a6 <MTIMERS_voidStart>
}
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <MTIMERS_voidset_compare_value>:

void MTIMERS_voidset_compare_value(u8 A_u8TIMER_ID,u16 A_u16compare_value)
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	00 d0       	rcall	.+0      	; 0xf68 <MTIMERS_voidset_compare_value+0x6>
     f68:	00 d0       	rcall	.+0      	; 0xf6a <MTIMERS_voidset_compare_value+0x8>
     f6a:	0f 92       	push	r0
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	89 83       	std	Y+1, r24	; 0x01
     f72:	7b 83       	std	Y+3, r23	; 0x03
     f74:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8TIMER_ID)
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	3d 83       	std	Y+5, r19	; 0x05
     f7e:	2c 83       	std	Y+4, r18	; 0x04
     f80:	8c 81       	ldd	r24, Y+4	; 0x04
     f82:	9d 81       	ldd	r25, Y+5	; 0x05
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	91 05       	cpc	r25, r1
     f88:	71 f0       	breq	.+28     	; 0xfa6 <MTIMERS_voidset_compare_value+0x44>
     f8a:	2c 81       	ldd	r18, Y+4	; 0x04
     f8c:	3d 81       	ldd	r19, Y+5	; 0x05
     f8e:	22 30       	cpi	r18, 0x02	; 2
     f90:	31 05       	cpc	r19, r1
     f92:	91 f0       	breq	.+36     	; 0xfb8 <MTIMERS_voidset_compare_value+0x56>
     f94:	8c 81       	ldd	r24, Y+4	; 0x04
     f96:	9d 81       	ldd	r25, Y+5	; 0x05
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	91 f4       	brne	.+36     	; 0xfc0 <MTIMERS_voidset_compare_value+0x5e>
	{
		case TIMER0:OCR0=A_u16compare_value;break;
     f9c:	ec e5       	ldi	r30, 0x5C	; 92
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	80 83       	st	Z, r24
     fa4:	0d c0       	rjmp	.+26     	; 0xfc0 <MTIMERS_voidset_compare_value+0x5e>
		case TIMER1:
			OCR1A = A_u16compare_value;   // Compare value for channel A
     fa6:	ea e4       	ldi	r30, 0x4A	; 74
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	80 83       	st	Z, r24
            OCR1B = A_u16compare_value;   // Compare value for channel B break;
     fae:	e8 e4       	ldi	r30, 0x48	; 72
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	80 83       	st	Z, r24
     fb6:	04 c0       	rjmp	.+8      	; 0xfc0 <MTIMERS_voidset_compare_value+0x5e>
            break;
		case TIMER2:OCR2 = A_u16compare_value; break;
     fb8:	e3 e4       	ldi	r30, 0x43	; 67
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	80 83       	st	Z, r24
	}
}
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <MTIMERS_voidSet_intervals_CTC>:

void MTIMERS_voidSet_intervals_CTC(u8 A_u8TIMER_ID,u16 A_u16Interval_counts,u16 A_u16compare_value, void (*A_funptr)(void))
{
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	27 97       	sbiw	r28, 0x07	; 7
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	89 83       	std	Y+1, r24	; 0x01
     fe6:	7b 83       	std	Y+3, r23	; 0x03
     fe8:	6a 83       	std	Y+2, r22	; 0x02
     fea:	5d 83       	std	Y+5, r21	; 0x05
     fec:	4c 83       	std	Y+4, r20	; 0x04
     fee:	3f 83       	std	Y+7, r19	; 0x07
     ff0:	2e 83       	std	Y+6, r18	; 0x06
	G_u32Inteval_counter= A_u16Interval_counts;
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	9b 81       	ldd	r25, Y+3	; 0x03
     ff6:	cc 01       	movw	r24, r24
     ff8:	a0 e0       	ldi	r26, 0x00	; 0
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	80 93 74 00 	sts	0x0074, r24
    1000:	90 93 75 00 	sts	0x0075, r25
    1004:	a0 93 76 00 	sts	0x0076, r26
    1008:	b0 93 77 00 	sts	0x0077, r27
	G_Time_ctc=A_funptr;
    100c:	8e 81       	ldd	r24, Y+6	; 0x06
    100e:	9f 81       	ldd	r25, Y+7	; 0x07
    1010:	90 93 73 00 	sts	0x0073, r25
    1014:	80 93 72 00 	sts	0x0072, r24
	MTIMERS_voidset_compare_value(A_u8TIMER_ID,A_u16compare_value);
    1018:	2c 81       	ldd	r18, Y+4	; 0x04
    101a:	3d 81       	ldd	r19, Y+5	; 0x05
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	b9 01       	movw	r22, r18
    1020:	0e 94 b1 07 	call	0xf62	; 0xf62 <MTIMERS_voidset_compare_value>
	//start timer
	MTIMERS_voidStart(A_u8TIMER_ID);
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	0e 94 53 08 	call	0x10a6	; 0x10a6 <MTIMERS_voidStart>
}
    102a:	27 96       	adiw	r28, 0x07	; 7
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <MTIMERS_voidPreload_value>:

void MTIMERS_voidPreload_value(u8 A_u8TIMER_ID,u16 A_u16Preload)
{
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	00 d0       	rcall	.+0      	; 0x1042 <MTIMERS_voidPreload_value+0x6>
    1042:	00 d0       	rcall	.+0      	; 0x1044 <MTIMERS_voidPreload_value+0x8>
    1044:	0f 92       	push	r0
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	89 83       	std	Y+1, r24	; 0x01
    104c:	7b 83       	std	Y+3, r23	; 0x03
    104e:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8TIMER_ID)
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	3d 83       	std	Y+5, r19	; 0x05
    1058:	2c 83       	std	Y+4, r18	; 0x04
    105a:	8c 81       	ldd	r24, Y+4	; 0x04
    105c:	9d 81       	ldd	r25, Y+5	; 0x05
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	91 05       	cpc	r25, r1
    1062:	71 f0       	breq	.+28     	; 0x1080 <MTIMERS_voidPreload_value+0x44>
    1064:	2c 81       	ldd	r18, Y+4	; 0x04
    1066:	3d 81       	ldd	r19, Y+5	; 0x05
    1068:	22 30       	cpi	r18, 0x02	; 2
    106a:	31 05       	cpc	r19, r1
    106c:	81 f0       	breq	.+32     	; 0x108e <MTIMERS_voidPreload_value+0x52>
    106e:	8c 81       	ldd	r24, Y+4	; 0x04
    1070:	9d 81       	ldd	r25, Y+5	; 0x05
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	81 f4       	brne	.+32     	; 0x1096 <MTIMERS_voidPreload_value+0x5a>
	{
		case TIMER0:TCNT0 = A_u16Preload;break;
    1076:	e2 e5       	ldi	r30, 0x52	; 82
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	80 83       	st	Z, r24
    107e:	0b c0       	rjmp	.+22     	; 0x1096 <MTIMERS_voidPreload_value+0x5a>
		case TIMER1:TCNT1 = A_u16Preload;break;
    1080:	ec e4       	ldi	r30, 0x4C	; 76
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	9b 81       	ldd	r25, Y+3	; 0x03
    1088:	91 83       	std	Z+1, r25	; 0x01
    108a:	80 83       	st	Z, r24
    108c:	04 c0       	rjmp	.+8      	; 0x1096 <MTIMERS_voidPreload_value+0x5a>
		case TIMER2:TCNT2 = A_u16Preload;break;
    108e:	e4 e4       	ldi	r30, 0x44	; 68
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	80 83       	st	Z, r24
	}

}
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <MTIMERS_voidStart>:

void MTIMERS_voidStart(u8 A_u8TIMER_ID)
{
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <MTIMERS_voidStart+0x6>
    10ac:	0f 92       	push	r0
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8TIMER_ID)
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	3b 83       	std	Y+3, r19	; 0x03
    10bc:	2a 83       	std	Y+2, r18	; 0x02
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	9b 81       	ldd	r25, Y+3	; 0x03
    10c2:	81 30       	cpi	r24, 0x01	; 1
    10c4:	91 05       	cpc	r25, r1
    10c6:	a1 f0       	breq	.+40     	; 0x10f0 <MTIMERS_voidStart+0x4a>
    10c8:	2a 81       	ldd	r18, Y+2	; 0x02
    10ca:	3b 81       	ldd	r19, Y+3	; 0x03
    10cc:	22 30       	cpi	r18, 0x02	; 2
    10ce:	31 05       	cpc	r19, r1
    10d0:	11 f1       	breq	.+68     	; 0x1116 <MTIMERS_voidStart+0x70>
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	9b 81       	ldd	r25, Y+3	; 0x03
    10d6:	00 97       	sbiw	r24, 0x00	; 0
    10d8:	41 f5       	brne	.+80     	; 0x112a <MTIMERS_voidStart+0x84>
	{
		case TIMER0:
			TCNT0 =0;
    10da:	e2 e5       	ldi	r30, 0x52	; 82
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	10 82       	st	Z, r1
			TCCR0|= (1<<COM01)|(0<<CS02)|(1<<CS01)|(1<<CS00);
    10e0:	a3 e5       	ldi	r26, 0x53	; 83
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e3 e5       	ldi	r30, 0x53	; 83
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	83 62       	ori	r24, 0x23	; 35
    10ec:	8c 93       	st	X, r24
    10ee:	1d c0       	rjmp	.+58     	; 0x112a <MTIMERS_voidStart+0x84>
			break;
		case TIMER1:
			TCCR1B |= (1 << CS10)| (1<<CS11)| (0<<CS12);
    10f0:	ae e4       	ldi	r26, 0x4E	; 78
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	ee e4       	ldi	r30, 0x4E	; 78
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	83 60       	ori	r24, 0x03	; 3
    10fc:	8c 93       	st	X, r24
			TCCR1A |= (1<<COM1A1);
    10fe:	af e4       	ldi	r26, 0x4F	; 79
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	ef e4       	ldi	r30, 0x4F	; 79
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	80 68       	ori	r24, 0x80	; 128
    110a:	8c 93       	st	X, r24
			ICR1L=4999;
    110c:	e6 e4       	ldi	r30, 0x46	; 70
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	87 e8       	ldi	r24, 0x87	; 135
    1112:	80 83       	st	Z, r24
    1114:	0a c0       	rjmp	.+20     	; 0x112a <MTIMERS_voidStart+0x84>
			break;
		case TIMER2:
			TCNT2 =0;
    1116:	e4 e4       	ldi	r30, 0x44	; 68
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	10 82       	st	Z, r1
			TCCR2|=(1<<COM21)|(0<<CS20)|(0<<CS21)|(1<<CS22);
    111c:	a5 e4       	ldi	r26, 0x45	; 69
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e5 e4       	ldi	r30, 0x45	; 69
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	84 62       	ori	r24, 0x24	; 36
    1128:	8c 93       	st	X, r24
			break;
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	08 95       	ret

00001136 <MTIMERS_voidStop>:

void MTIMERS_voidStop (u8 A_u8TIMER_ID)
{
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	00 d0       	rcall	.+0      	; 0x113c <MTIMERS_voidStop+0x6>
    113c:	0f 92       	push	r0
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8TIMER_ID)
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	3b 83       	std	Y+3, r19	; 0x03
    114c:	2a 83       	std	Y+2, r18	; 0x02
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	9b 81       	ldd	r25, Y+3	; 0x03
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	91 05       	cpc	r25, r1
    1156:	89 f0       	breq	.+34     	; 0x117a <MTIMERS_voidStop+0x44>
    1158:	2a 81       	ldd	r18, Y+2	; 0x02
    115a:	3b 81       	ldd	r19, Y+3	; 0x03
    115c:	22 30       	cpi	r18, 0x02	; 2
    115e:	31 05       	cpc	r19, r1
    1160:	a1 f0       	breq	.+40     	; 0x118a <MTIMERS_voidStop+0x54>
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	9b 81       	ldd	r25, Y+3	; 0x03
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	b9 f4       	brne	.+46     	; 0x1198 <MTIMERS_voidStop+0x62>
	{
		case TIMER0:TCCR0= (TCCR0 &0b11111000) | (0b000);break;
    116a:	a3 e5       	ldi	r26, 0x53	; 83
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e3 e5       	ldi	r30, 0x53	; 83
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	88 7f       	andi	r24, 0xF8	; 248
    1176:	8c 93       	st	X, r24
    1178:	0f c0       	rjmp	.+30     	; 0x1198 <MTIMERS_voidStop+0x62>
		case TIMER1:TCCR1B &= ~(1 << CS10);break;
    117a:	ae e4       	ldi	r26, 0x4E	; 78
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	ee e4       	ldi	r30, 0x4E	; 78
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	8e 7f       	andi	r24, 0xFE	; 254
    1186:	8c 93       	st	X, r24
    1188:	07 c0       	rjmp	.+14     	; 0x1198 <MTIMERS_voidStop+0x62>
		case TIMER2:TCCR2 &= 0b11111000;break;
    118a:	a5 e4       	ldi	r26, 0x45	; 69
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e5 e4       	ldi	r30, 0x45	; 69
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	88 7f       	andi	r24, 0xF8	; 248
    1196:	8c 93       	st	X, r24
	}
}
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <__vector_10>:

void __vector_10 (void)	__attribute__((signal));
void __vector_10 (void)
{
    11a4:	1f 92       	push	r1
    11a6:	0f 92       	push	r0
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	0f 92       	push	r0
    11ac:	11 24       	eor	r1, r1
    11ae:	2f 93       	push	r18
    11b0:	3f 93       	push	r19
    11b2:	4f 93       	push	r20
    11b4:	5f 93       	push	r21
    11b6:	6f 93       	push	r22
    11b8:	7f 93       	push	r23
    11ba:	8f 93       	push	r24
    11bc:	9f 93       	push	r25
    11be:	af 93       	push	r26
    11c0:	bf 93       	push	r27
    11c2:	ef 93       	push	r30
    11c4:	ff 93       	push	r31
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
	static u32 Ls_u32Counter=0;

	Ls_u32Counter++;
    11ce:	80 91 68 00 	lds	r24, 0x0068
    11d2:	90 91 69 00 	lds	r25, 0x0069
    11d6:	a0 91 6a 00 	lds	r26, 0x006A
    11da:	b0 91 6b 00 	lds	r27, 0x006B
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	a1 1d       	adc	r26, r1
    11e2:	b1 1d       	adc	r27, r1
    11e4:	80 93 68 00 	sts	0x0068, r24
    11e8:	90 93 69 00 	sts	0x0069, r25
    11ec:	a0 93 6a 00 	sts	0x006A, r26
    11f0:	b0 93 6b 00 	sts	0x006B, r27

	if(Ls_u32Counter== G_u32Inteval_counter){
    11f4:	20 91 68 00 	lds	r18, 0x0068
    11f8:	30 91 69 00 	lds	r19, 0x0069
    11fc:	40 91 6a 00 	lds	r20, 0x006A
    1200:	50 91 6b 00 	lds	r21, 0x006B
    1204:	80 91 74 00 	lds	r24, 0x0074
    1208:	90 91 75 00 	lds	r25, 0x0075
    120c:	a0 91 76 00 	lds	r26, 0x0076
    1210:	b0 91 77 00 	lds	r27, 0x0077
    1214:	28 17       	cp	r18, r24
    1216:	39 07       	cpc	r19, r25
    1218:	4a 07       	cpc	r20, r26
    121a:	5b 07       	cpc	r21, r27
    121c:	69 f4       	brne	.+26     	; 0x1238 <__vector_10+0x94>
		G_Time_ctc();
    121e:	e0 91 72 00 	lds	r30, 0x0072
    1222:	f0 91 73 00 	lds	r31, 0x0073
    1226:	09 95       	icall
		Ls_u32Counter=0;
    1228:	10 92 68 00 	sts	0x0068, r1
    122c:	10 92 69 00 	sts	0x0069, r1
    1230:	10 92 6a 00 	sts	0x006A, r1
    1234:	10 92 6b 00 	sts	0x006B, r1
	}

}
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	ff 91       	pop	r31
    123e:	ef 91       	pop	r30
    1240:	bf 91       	pop	r27
    1242:	af 91       	pop	r26
    1244:	9f 91       	pop	r25
    1246:	8f 91       	pop	r24
    1248:	7f 91       	pop	r23
    124a:	6f 91       	pop	r22
    124c:	5f 91       	pop	r21
    124e:	4f 91       	pop	r20
    1250:	3f 91       	pop	r19
    1252:	2f 91       	pop	r18
    1254:	0f 90       	pop	r0
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	0f 90       	pop	r0
    125a:	1f 90       	pop	r1
    125c:	18 95       	reti

0000125e <__vector_11>:

void __vector_11 (void)	__attribute__((signal));
void __vector_11 (void)
{
    125e:	1f 92       	push	r1
    1260:	0f 92       	push	r0
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	0f 92       	push	r0
    1266:	11 24       	eor	r1, r1
    1268:	2f 93       	push	r18
    126a:	3f 93       	push	r19
    126c:	4f 93       	push	r20
    126e:	5f 93       	push	r21
    1270:	6f 93       	push	r22
    1272:	7f 93       	push	r23
    1274:	8f 93       	push	r24
    1276:	9f 93       	push	r25
    1278:	af 93       	push	r26
    127a:	bf 93       	push	r27
    127c:	ef 93       	push	r30
    127e:	ff 93       	push	r31
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
	static u32 Ls_u32Counter=0;

	Ls_u32Counter++;
    1288:	80 91 6c 00 	lds	r24, 0x006C
    128c:	90 91 6d 00 	lds	r25, 0x006D
    1290:	a0 91 6e 00 	lds	r26, 0x006E
    1294:	b0 91 6f 00 	lds	r27, 0x006F
    1298:	01 96       	adiw	r24, 0x01	; 1
    129a:	a1 1d       	adc	r26, r1
    129c:	b1 1d       	adc	r27, r1
    129e:	80 93 6c 00 	sts	0x006C, r24
    12a2:	90 93 6d 00 	sts	0x006D, r25
    12a6:	a0 93 6e 00 	sts	0x006E, r26
    12aa:	b0 93 6f 00 	sts	0x006F, r27

	if(Ls_u32Counter== G_u32Inteval_counter){
    12ae:	20 91 6c 00 	lds	r18, 0x006C
    12b2:	30 91 6d 00 	lds	r19, 0x006D
    12b6:	40 91 6e 00 	lds	r20, 0x006E
    12ba:	50 91 6f 00 	lds	r21, 0x006F
    12be:	80 91 74 00 	lds	r24, 0x0074
    12c2:	90 91 75 00 	lds	r25, 0x0075
    12c6:	a0 91 76 00 	lds	r26, 0x0076
    12ca:	b0 91 77 00 	lds	r27, 0x0077
    12ce:	28 17       	cp	r18, r24
    12d0:	39 07       	cpc	r19, r25
    12d2:	4a 07       	cpc	r20, r26
    12d4:	5b 07       	cpc	r21, r27
    12d6:	69 f4       	brne	.+26     	; 0x12f2 <__vector_11+0x94>
		G_Time_ovf();
    12d8:	e0 91 70 00 	lds	r30, 0x0070
    12dc:	f0 91 71 00 	lds	r31, 0x0071
    12e0:	09 95       	icall
		Ls_u32Counter=0;
    12e2:	10 92 6c 00 	sts	0x006C, r1
    12e6:	10 92 6d 00 	sts	0x006D, r1
    12ea:	10 92 6e 00 	sts	0x006E, r1
    12ee:	10 92 6f 00 	sts	0x006F, r1
	}

}
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	ff 91       	pop	r31
    12f8:	ef 91       	pop	r30
    12fa:	bf 91       	pop	r27
    12fc:	af 91       	pop	r26
    12fe:	9f 91       	pop	r25
    1300:	8f 91       	pop	r24
    1302:	7f 91       	pop	r23
    1304:	6f 91       	pop	r22
    1306:	5f 91       	pop	r21
    1308:	4f 91       	pop	r20
    130a:	3f 91       	pop	r19
    130c:	2f 91       	pop	r18
    130e:	0f 90       	pop	r0
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	0f 90       	pop	r0
    1314:	1f 90       	pop	r1
    1316:	18 95       	reti

00001318 <MDIO_voidSetPinDirection>:
#define DIO_DDRD_REG *((volatile u8*)0x031)
#define DIO_PIND_REG *((volatile u8*)0x030)


void MDIO_voidSetPinDirection(u8 A_u8PortNo,u8 A_u8PinNo, u8 A_u8PinDirection)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	2d 97       	sbiw	r28, 0x0d	; 13
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	cd bf       	out	0x3d, r28	; 61
    132c:	89 83       	std	Y+1, r24	; 0x01
    132e:	6a 83       	std	Y+2, r22	; 0x02
    1330:	4b 83       	std	Y+3, r20	; 0x03
	if((A_u8PortNo <= PortD) && (A_u8PinNo <= PIN7) && (A_u8PinDirection <= output)){
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	84 30       	cpi	r24, 0x04	; 4
    1336:	08 f0       	brcs	.+2      	; 0x133a <MDIO_voidSetPinDirection+0x22>
    1338:	08 c1       	rjmp	.+528    	; 0x154a <MDIO_voidSetPinDirection+0x232>
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	88 30       	cpi	r24, 0x08	; 8
    133e:	08 f0       	brcs	.+2      	; 0x1342 <MDIO_voidSetPinDirection+0x2a>
    1340:	04 c1       	rjmp	.+520    	; 0x154a <MDIO_voidSetPinDirection+0x232>
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	82 30       	cpi	r24, 0x02	; 2
    1346:	08 f0       	brcs	.+2      	; 0x134a <MDIO_voidSetPinDirection+0x32>
    1348:	00 c1       	rjmp	.+512    	; 0x154a <MDIO_voidSetPinDirection+0x232>

		switch(A_u8PortNo)
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	3d 87       	std	Y+13, r19	; 0x0d
    1352:	2c 87       	std	Y+12, r18	; 0x0c
    1354:	8c 85       	ldd	r24, Y+12	; 0x0c
    1356:	9d 85       	ldd	r25, Y+13	; 0x0d
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	91 05       	cpc	r25, r1
    135c:	09 f4       	brne	.+2      	; 0x1360 <MDIO_voidSetPinDirection+0x48>
    135e:	4f c0       	rjmp	.+158    	; 0x13fe <MDIO_voidSetPinDirection+0xe6>
    1360:	2c 85       	ldd	r18, Y+12	; 0x0c
    1362:	3d 85       	ldd	r19, Y+13	; 0x0d
    1364:	22 30       	cpi	r18, 0x02	; 2
    1366:	31 05       	cpc	r19, r1
    1368:	2c f4       	brge	.+10     	; 0x1374 <MDIO_voidSetPinDirection+0x5c>
    136a:	8c 85       	ldd	r24, Y+12	; 0x0c
    136c:	9d 85       	ldd	r25, Y+13	; 0x0d
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	71 f0       	breq	.+28     	; 0x138e <MDIO_voidSetPinDirection+0x76>
    1372:	eb c0       	rjmp	.+470    	; 0x154a <MDIO_voidSetPinDirection+0x232>
    1374:	2c 85       	ldd	r18, Y+12	; 0x0c
    1376:	3d 85       	ldd	r19, Y+13	; 0x0d
    1378:	22 30       	cpi	r18, 0x02	; 2
    137a:	31 05       	cpc	r19, r1
    137c:	09 f4       	brne	.+2      	; 0x1380 <MDIO_voidSetPinDirection+0x68>
    137e:	77 c0       	rjmp	.+238    	; 0x146e <MDIO_voidSetPinDirection+0x156>
    1380:	8c 85       	ldd	r24, Y+12	; 0x0c
    1382:	9d 85       	ldd	r25, Y+13	; 0x0d
    1384:	83 30       	cpi	r24, 0x03	; 3
    1386:	91 05       	cpc	r25, r1
    1388:	09 f4       	brne	.+2      	; 0x138c <MDIO_voidSetPinDirection+0x74>
    138a:	a9 c0       	rjmp	.+338    	; 0x14de <MDIO_voidSetPinDirection+0x1c6>
    138c:	de c0       	rjmp	.+444    	; 0x154a <MDIO_voidSetPinDirection+0x232>
		{
			case PortA:

				switch(A_u8PinDirection)
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	3b 87       	std	Y+11, r19	; 0x0b
    1396:	2a 87       	std	Y+10, r18	; 0x0a
    1398:	8a 85       	ldd	r24, Y+10	; 0x0a
    139a:	9b 85       	ldd	r25, Y+11	; 0x0b
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	d1 f0       	breq	.+52     	; 0x13d4 <MDIO_voidSetPinDirection+0xbc>
    13a0:	2a 85       	ldd	r18, Y+10	; 0x0a
    13a2:	3b 85       	ldd	r19, Y+11	; 0x0b
    13a4:	21 30       	cpi	r18, 0x01	; 1
    13a6:	31 05       	cpc	r19, r1
    13a8:	09 f0       	breq	.+2      	; 0x13ac <MDIO_voidSetPinDirection+0x94>
    13aa:	cf c0       	rjmp	.+414    	; 0x154a <MDIO_voidSetPinDirection+0x232>
				{
					case output: Set_Bit(DIO_DDRA_REG,A_u8PinNo);break;
    13ac:	aa e3       	ldi	r26, 0x3A	; 58
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	ea e3       	ldi	r30, 0x3A	; 58
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	48 2f       	mov	r20, r24
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	02 2e       	mov	r0, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <MDIO_voidSetPinDirection+0xb2>
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	0a 94       	dec	r0
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <MDIO_voidSetPinDirection+0xae>
    13ce:	84 2b       	or	r24, r20
    13d0:	8c 93       	st	X, r24
    13d2:	bb c0       	rjmp	.+374    	; 0x154a <MDIO_voidSetPinDirection+0x232>
					case input: Clr_Bit(DIO_DDRA_REG,A_u8PinNo);break;
    13d4:	aa e3       	ldi	r26, 0x3A	; 58
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	ea e3       	ldi	r30, 0x3A	; 58
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	48 2f       	mov	r20, r24
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	02 2e       	mov	r0, r18
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <MDIO_voidSetPinDirection+0xda>
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	0a 94       	dec	r0
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <MDIO_voidSetPinDirection+0xd6>
    13f6:	80 95       	com	r24
    13f8:	84 23       	and	r24, r20
    13fa:	8c 93       	st	X, r24
    13fc:	a6 c0       	rjmp	.+332    	; 0x154a <MDIO_voidSetPinDirection+0x232>
				}
				break;

			case PortB:

				switch(A_u8PinDirection)
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	39 87       	std	Y+9, r19	; 0x09
    1406:	28 87       	std	Y+8, r18	; 0x08
    1408:	88 85       	ldd	r24, Y+8	; 0x08
    140a:	99 85       	ldd	r25, Y+9	; 0x09
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	d1 f0       	breq	.+52     	; 0x1444 <MDIO_voidSetPinDirection+0x12c>
    1410:	28 85       	ldd	r18, Y+8	; 0x08
    1412:	39 85       	ldd	r19, Y+9	; 0x09
    1414:	21 30       	cpi	r18, 0x01	; 1
    1416:	31 05       	cpc	r19, r1
    1418:	09 f0       	breq	.+2      	; 0x141c <MDIO_voidSetPinDirection+0x104>
    141a:	97 c0       	rjmp	.+302    	; 0x154a <MDIO_voidSetPinDirection+0x232>
				{
					case output: Set_Bit(DIO_DDRB_REG,A_u8PinNo);break;
    141c:	a7 e3       	ldi	r26, 0x37	; 55
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e7 e3       	ldi	r30, 0x37	; 55
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	48 2f       	mov	r20, r24
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	02 2e       	mov	r0, r18
    1434:	02 c0       	rjmp	.+4      	; 0x143a <MDIO_voidSetPinDirection+0x122>
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	0a 94       	dec	r0
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <MDIO_voidSetPinDirection+0x11e>
    143e:	84 2b       	or	r24, r20
    1440:	8c 93       	st	X, r24
    1442:	83 c0       	rjmp	.+262    	; 0x154a <MDIO_voidSetPinDirection+0x232>
					case input: Clr_Bit(DIO_DDRB_REG,A_u8PinNo);break;
    1444:	a7 e3       	ldi	r26, 0x37	; 55
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e7 e3       	ldi	r30, 0x37	; 55
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 2e       	mov	r0, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <MDIO_voidSetPinDirection+0x14a>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	0a 94       	dec	r0
    1464:	e2 f7       	brpl	.-8      	; 0x145e <MDIO_voidSetPinDirection+0x146>
    1466:	80 95       	com	r24
    1468:	84 23       	and	r24, r20
    146a:	8c 93       	st	X, r24
    146c:	6e c0       	rjmp	.+220    	; 0x154a <MDIO_voidSetPinDirection+0x232>
				}
				break;

			case PortC:

				switch(A_u8PinDirection)
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	3f 83       	std	Y+7, r19	; 0x07
    1476:	2e 83       	std	Y+6, r18	; 0x06
    1478:	8e 81       	ldd	r24, Y+6	; 0x06
    147a:	9f 81       	ldd	r25, Y+7	; 0x07
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	d1 f0       	breq	.+52     	; 0x14b4 <MDIO_voidSetPinDirection+0x19c>
    1480:	2e 81       	ldd	r18, Y+6	; 0x06
    1482:	3f 81       	ldd	r19, Y+7	; 0x07
    1484:	21 30       	cpi	r18, 0x01	; 1
    1486:	31 05       	cpc	r19, r1
    1488:	09 f0       	breq	.+2      	; 0x148c <MDIO_voidSetPinDirection+0x174>
    148a:	5f c0       	rjmp	.+190    	; 0x154a <MDIO_voidSetPinDirection+0x232>
				{
					case output: Set_Bit(DIO_DDRC_REG,A_u8PinNo);break;
    148c:	a4 e3       	ldi	r26, 0x34	; 52
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e4 e3       	ldi	r30, 0x34	; 52
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	48 2f       	mov	r20, r24
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 2e       	mov	r0, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <MDIO_voidSetPinDirection+0x192>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	0a 94       	dec	r0
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <MDIO_voidSetPinDirection+0x18e>
    14ae:	84 2b       	or	r24, r20
    14b0:	8c 93       	st	X, r24
    14b2:	4b c0       	rjmp	.+150    	; 0x154a <MDIO_voidSetPinDirection+0x232>
					case input: Clr_Bit(DIO_DDRC_REG,A_u8PinNo);break;
    14b4:	a4 e3       	ldi	r26, 0x34	; 52
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e4 e3       	ldi	r30, 0x34	; 52
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	48 2f       	mov	r20, r24
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	02 2e       	mov	r0, r18
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <MDIO_voidSetPinDirection+0x1ba>
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	0a 94       	dec	r0
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <MDIO_voidSetPinDirection+0x1b6>
    14d6:	80 95       	com	r24
    14d8:	84 23       	and	r24, r20
    14da:	8c 93       	st	X, r24
    14dc:	36 c0       	rjmp	.+108    	; 0x154a <MDIO_voidSetPinDirection+0x232>
				}
				break;

			case PortD:

				switch(A_u8PinDirection)
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	3d 83       	std	Y+5, r19	; 0x05
    14e6:	2c 83       	std	Y+4, r18	; 0x04
    14e8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ea:	9d 81       	ldd	r25, Y+5	; 0x05
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	c9 f0       	breq	.+50     	; 0x1522 <MDIO_voidSetPinDirection+0x20a>
    14f0:	2c 81       	ldd	r18, Y+4	; 0x04
    14f2:	3d 81       	ldd	r19, Y+5	; 0x05
    14f4:	21 30       	cpi	r18, 0x01	; 1
    14f6:	31 05       	cpc	r19, r1
    14f8:	41 f5       	brne	.+80     	; 0x154a <MDIO_voidSetPinDirection+0x232>
				{
					case output: Set_Bit(DIO_DDRD_REG,A_u8PinNo);break;
    14fa:	a1 e3       	ldi	r26, 0x31	; 49
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e1 e3       	ldi	r30, 0x31	; 49
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	48 2f       	mov	r20, r24
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	02 2e       	mov	r0, r18
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <MDIO_voidSetPinDirection+0x200>
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	0a 94       	dec	r0
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <MDIO_voidSetPinDirection+0x1fc>
    151c:	84 2b       	or	r24, r20
    151e:	8c 93       	st	X, r24
    1520:	14 c0       	rjmp	.+40     	; 0x154a <MDIO_voidSetPinDirection+0x232>
					case input: Clr_Bit(DIO_DDRD_REG,A_u8PinNo);break;
    1522:	a1 e3       	ldi	r26, 0x31	; 49
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e1 e3       	ldi	r30, 0x31	; 49
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	48 2f       	mov	r20, r24
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	02 2e       	mov	r0, r18
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <MDIO_voidSetPinDirection+0x228>
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	0a 94       	dec	r0
    1542:	e2 f7       	brpl	.-8      	; 0x153c <MDIO_voidSetPinDirection+0x224>
    1544:	80 95       	com	r24
    1546:	84 23       	and	r24, r20
    1548:	8c 93       	st	X, r24

		#if A_u8PinDirection<0 || A_u8PinDirection>1
		#error Undefined Direction
		#endif
	}
}
    154a:	2d 96       	adiw	r28, 0x0d	; 13
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(u8 A_u8PortNo,u8 A_u8PinNo, u8 A_u8PinValue)
{
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	2d 97       	sbiw	r28, 0x0d	; 13
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	de bf       	out	0x3e, r29	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	cd bf       	out	0x3d, r28	; 61
    1570:	89 83       	std	Y+1, r24	; 0x01
    1572:	6a 83       	std	Y+2, r22	; 0x02
    1574:	4b 83       	std	Y+3, r20	; 0x03
	if((A_u8PortNo <= PortD) && (A_u8PinNo <= PIN7) && (A_u8PinValue <= High)){
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	84 30       	cpi	r24, 0x04	; 4
    157a:	08 f0       	brcs	.+2      	; 0x157e <MDIO_voidSetPinValue+0x22>
    157c:	08 c1       	rjmp	.+528    	; 0x178e <MDIO_voidSetPinValue+0x232>
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	88 30       	cpi	r24, 0x08	; 8
    1582:	08 f0       	brcs	.+2      	; 0x1586 <MDIO_voidSetPinValue+0x2a>
    1584:	04 c1       	rjmp	.+520    	; 0x178e <MDIO_voidSetPinValue+0x232>
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	82 30       	cpi	r24, 0x02	; 2
    158a:	08 f0       	brcs	.+2      	; 0x158e <MDIO_voidSetPinValue+0x32>
    158c:	00 c1       	rjmp	.+512    	; 0x178e <MDIO_voidSetPinValue+0x232>

		switch(A_u8PortNo)
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	3d 87       	std	Y+13, r19	; 0x0d
    1596:	2c 87       	std	Y+12, r18	; 0x0c
    1598:	8c 85       	ldd	r24, Y+12	; 0x0c
    159a:	9d 85       	ldd	r25, Y+13	; 0x0d
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	91 05       	cpc	r25, r1
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <MDIO_voidSetPinValue+0x48>
    15a2:	4f c0       	rjmp	.+158    	; 0x1642 <MDIO_voidSetPinValue+0xe6>
    15a4:	2c 85       	ldd	r18, Y+12	; 0x0c
    15a6:	3d 85       	ldd	r19, Y+13	; 0x0d
    15a8:	22 30       	cpi	r18, 0x02	; 2
    15aa:	31 05       	cpc	r19, r1
    15ac:	2c f4       	brge	.+10     	; 0x15b8 <MDIO_voidSetPinValue+0x5c>
    15ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    15b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    15b2:	00 97       	sbiw	r24, 0x00	; 0
    15b4:	71 f0       	breq	.+28     	; 0x15d2 <MDIO_voidSetPinValue+0x76>
    15b6:	eb c0       	rjmp	.+470    	; 0x178e <MDIO_voidSetPinValue+0x232>
    15b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    15ba:	3d 85       	ldd	r19, Y+13	; 0x0d
    15bc:	22 30       	cpi	r18, 0x02	; 2
    15be:	31 05       	cpc	r19, r1
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <MDIO_voidSetPinValue+0x68>
    15c2:	77 c0       	rjmp	.+238    	; 0x16b2 <MDIO_voidSetPinValue+0x156>
    15c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    15c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    15c8:	83 30       	cpi	r24, 0x03	; 3
    15ca:	91 05       	cpc	r25, r1
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <MDIO_voidSetPinValue+0x74>
    15ce:	a9 c0       	rjmp	.+338    	; 0x1722 <MDIO_voidSetPinValue+0x1c6>
    15d0:	de c0       	rjmp	.+444    	; 0x178e <MDIO_voidSetPinValue+0x232>
			{
				case PortA:

					switch(A_u8PinValue)
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	3b 87       	std	Y+11, r19	; 0x0b
    15da:	2a 87       	std	Y+10, r18	; 0x0a
    15dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    15de:	9b 85       	ldd	r25, Y+11	; 0x0b
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	d1 f0       	breq	.+52     	; 0x1618 <MDIO_voidSetPinValue+0xbc>
    15e4:	2a 85       	ldd	r18, Y+10	; 0x0a
    15e6:	3b 85       	ldd	r19, Y+11	; 0x0b
    15e8:	21 30       	cpi	r18, 0x01	; 1
    15ea:	31 05       	cpc	r19, r1
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <MDIO_voidSetPinValue+0x94>
    15ee:	cf c0       	rjmp	.+414    	; 0x178e <MDIO_voidSetPinValue+0x232>
					{
						case output: Set_Bit(DIO_PORTA_REG,A_u8PinNo);break;
    15f0:	ab e3       	ldi	r26, 0x3B	; 59
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	eb e3       	ldi	r30, 0x3B	; 59
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	48 2f       	mov	r20, r24
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 2e       	mov	r0, r18
    1608:	02 c0       	rjmp	.+4      	; 0x160e <MDIO_voidSetPinValue+0xb2>
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	0a 94       	dec	r0
    1610:	e2 f7       	brpl	.-8      	; 0x160a <MDIO_voidSetPinValue+0xae>
    1612:	84 2b       	or	r24, r20
    1614:	8c 93       	st	X, r24
    1616:	bb c0       	rjmp	.+374    	; 0x178e <MDIO_voidSetPinValue+0x232>
						case input: Clr_Bit(DIO_PORTA_REG,A_u8PinNo);break;
    1618:	ab e3       	ldi	r26, 0x3B	; 59
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	eb e3       	ldi	r30, 0x3B	; 59
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 2e       	mov	r0, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <MDIO_voidSetPinValue+0xda>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <MDIO_voidSetPinValue+0xd6>
    163a:	80 95       	com	r24
    163c:	84 23       	and	r24, r20
    163e:	8c 93       	st	X, r24
    1640:	a6 c0       	rjmp	.+332    	; 0x178e <MDIO_voidSetPinValue+0x232>
					}
					break;

				case PortB:

					switch(A_u8PinValue)
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	39 87       	std	Y+9, r19	; 0x09
    164a:	28 87       	std	Y+8, r18	; 0x08
    164c:	88 85       	ldd	r24, Y+8	; 0x08
    164e:	99 85       	ldd	r25, Y+9	; 0x09
    1650:	00 97       	sbiw	r24, 0x00	; 0
    1652:	d1 f0       	breq	.+52     	; 0x1688 <MDIO_voidSetPinValue+0x12c>
    1654:	28 85       	ldd	r18, Y+8	; 0x08
    1656:	39 85       	ldd	r19, Y+9	; 0x09
    1658:	21 30       	cpi	r18, 0x01	; 1
    165a:	31 05       	cpc	r19, r1
    165c:	09 f0       	breq	.+2      	; 0x1660 <MDIO_voidSetPinValue+0x104>
    165e:	97 c0       	rjmp	.+302    	; 0x178e <MDIO_voidSetPinValue+0x232>
					{
						case output: Set_Bit(DIO_PORTB_REG,A_u8PinNo);break;
    1660:	a8 e3       	ldi	r26, 0x38	; 56
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e8 e3       	ldi	r30, 0x38	; 56
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	48 2f       	mov	r20, r24
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	02 2e       	mov	r0, r18
    1678:	02 c0       	rjmp	.+4      	; 0x167e <MDIO_voidSetPinValue+0x122>
    167a:	88 0f       	add	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	0a 94       	dec	r0
    1680:	e2 f7       	brpl	.-8      	; 0x167a <MDIO_voidSetPinValue+0x11e>
    1682:	84 2b       	or	r24, r20
    1684:	8c 93       	st	X, r24
    1686:	83 c0       	rjmp	.+262    	; 0x178e <MDIO_voidSetPinValue+0x232>
						case input: Clr_Bit(DIO_PORTB_REG,A_u8PinNo);break;
    1688:	a8 e3       	ldi	r26, 0x38	; 56
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e8 e3       	ldi	r30, 0x38	; 56
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 2e       	mov	r0, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <MDIO_voidSetPinValue+0x14a>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <MDIO_voidSetPinValue+0x146>
    16aa:	80 95       	com	r24
    16ac:	84 23       	and	r24, r20
    16ae:	8c 93       	st	X, r24
    16b0:	6e c0       	rjmp	.+220    	; 0x178e <MDIO_voidSetPinValue+0x232>
					}
					break;

				case PortC:

					switch(A_u8PinValue)
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	3f 83       	std	Y+7, r19	; 0x07
    16ba:	2e 83       	std	Y+6, r18	; 0x06
    16bc:	8e 81       	ldd	r24, Y+6	; 0x06
    16be:	9f 81       	ldd	r25, Y+7	; 0x07
    16c0:	00 97       	sbiw	r24, 0x00	; 0
    16c2:	d1 f0       	breq	.+52     	; 0x16f8 <MDIO_voidSetPinValue+0x19c>
    16c4:	2e 81       	ldd	r18, Y+6	; 0x06
    16c6:	3f 81       	ldd	r19, Y+7	; 0x07
    16c8:	21 30       	cpi	r18, 0x01	; 1
    16ca:	31 05       	cpc	r19, r1
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <MDIO_voidSetPinValue+0x174>
    16ce:	5f c0       	rjmp	.+190    	; 0x178e <MDIO_voidSetPinValue+0x232>
					{
						case output: Set_Bit(DIO_PORTC_REG,A_u8PinNo);break;
    16d0:	a5 e3       	ldi	r26, 0x35	; 53
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e5 e3       	ldi	r30, 0x35	; 53
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	48 2f       	mov	r20, r24
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	02 2e       	mov	r0, r18
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <MDIO_voidSetPinValue+0x192>
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	0a 94       	dec	r0
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <MDIO_voidSetPinValue+0x18e>
    16f2:	84 2b       	or	r24, r20
    16f4:	8c 93       	st	X, r24
    16f6:	4b c0       	rjmp	.+150    	; 0x178e <MDIO_voidSetPinValue+0x232>
						case input: Clr_Bit(DIO_PORTC_REG,A_u8PinNo);break;
    16f8:	a5 e3       	ldi	r26, 0x35	; 53
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e5 e3       	ldi	r30, 0x35	; 53
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	48 2f       	mov	r20, r24
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	02 2e       	mov	r0, r18
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <MDIO_voidSetPinValue+0x1ba>
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	0a 94       	dec	r0
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <MDIO_voidSetPinValue+0x1b6>
    171a:	80 95       	com	r24
    171c:	84 23       	and	r24, r20
    171e:	8c 93       	st	X, r24
    1720:	36 c0       	rjmp	.+108    	; 0x178e <MDIO_voidSetPinValue+0x232>
					}
					break;

				case PortD:

					switch(A_u8PinValue)
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	3d 83       	std	Y+5, r19	; 0x05
    172a:	2c 83       	std	Y+4, r18	; 0x04
    172c:	8c 81       	ldd	r24, Y+4	; 0x04
    172e:	9d 81       	ldd	r25, Y+5	; 0x05
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	c9 f0       	breq	.+50     	; 0x1766 <MDIO_voidSetPinValue+0x20a>
    1734:	2c 81       	ldd	r18, Y+4	; 0x04
    1736:	3d 81       	ldd	r19, Y+5	; 0x05
    1738:	21 30       	cpi	r18, 0x01	; 1
    173a:	31 05       	cpc	r19, r1
    173c:	41 f5       	brne	.+80     	; 0x178e <MDIO_voidSetPinValue+0x232>
					{
						case output: Set_Bit(DIO_PORTD_REG,A_u8PinNo);break;
    173e:	a2 e3       	ldi	r26, 0x32	; 50
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e2 e3       	ldi	r30, 0x32	; 50
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	48 2f       	mov	r20, r24
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	02 2e       	mov	r0, r18
    1756:	02 c0       	rjmp	.+4      	; 0x175c <MDIO_voidSetPinValue+0x200>
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	0a 94       	dec	r0
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <MDIO_voidSetPinValue+0x1fc>
    1760:	84 2b       	or	r24, r20
    1762:	8c 93       	st	X, r24
    1764:	14 c0       	rjmp	.+40     	; 0x178e <MDIO_voidSetPinValue+0x232>
						case input: Clr_Bit(DIO_PORTD_REG,A_u8PinNo);break;
    1766:	a2 e3       	ldi	r26, 0x32	; 50
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e2 e3       	ldi	r30, 0x32	; 50
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	48 2f       	mov	r20, r24
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	02 2e       	mov	r0, r18
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <MDIO_voidSetPinValue+0x228>
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	0a 94       	dec	r0
    1786:	e2 f7       	brpl	.-8      	; 0x1780 <MDIO_voidSetPinValue+0x224>
    1788:	80 95       	com	r24
    178a:	84 23       	and	r24, r20
    178c:	8c 93       	st	X, r24

		#if A_u8PinValue<0 || A_u8PinValue>1
		#error Undefined Value
		#endif
	}
}
    178e:	2d 96       	adiw	r28, 0x0d	; 13
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	f8 94       	cli
    1794:	de bf       	out	0x3e, r29	; 62
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	cd bf       	out	0x3d, r28	; 61
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	08 95       	ret

000017a0 <MDIO_u8GetPinValue>:

u8 MDIO_u8GetPinValue(u8 A_u8PortNo, u8 A_u8PinNo)
{
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	00 d0       	rcall	.+0      	; 0x17a6 <MDIO_u8GetPinValue+0x6>
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <MDIO_u8GetPinValue+0x8>
    17a8:	0f 92       	push	r0
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	8a 83       	std	Y+2, r24	; 0x02
    17b0:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8Pin_Direction=5;
    17b2:	85 e0       	ldi	r24, 0x05	; 5
    17b4:	89 83       	std	Y+1, r24	; 0x01

	if((A_u8PortNo <= PortD) && (A_u8PinNo <= PIN7)){
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	84 30       	cpi	r24, 0x04	; 4
    17ba:	08 f0       	brcs	.+2      	; 0x17be <MDIO_u8GetPinValue+0x1e>
    17bc:	6b c0       	rjmp	.+214    	; 0x1894 <MDIO_u8GetPinValue+0xf4>
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	88 30       	cpi	r24, 0x08	; 8
    17c2:	08 f0       	brcs	.+2      	; 0x17c6 <MDIO_u8GetPinValue+0x26>
    17c4:	67 c0       	rjmp	.+206    	; 0x1894 <MDIO_u8GetPinValue+0xf4>

		switch(A_u8PortNo)
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	3d 83       	std	Y+5, r19	; 0x05
    17ce:	2c 83       	std	Y+4, r18	; 0x04
    17d0:	4c 81       	ldd	r20, Y+4	; 0x04
    17d2:	5d 81       	ldd	r21, Y+5	; 0x05
    17d4:	41 30       	cpi	r20, 0x01	; 1
    17d6:	51 05       	cpc	r21, r1
    17d8:	41 f1       	breq	.+80     	; 0x182a <MDIO_u8GetPinValue+0x8a>
    17da:	8c 81       	ldd	r24, Y+4	; 0x04
    17dc:	9d 81       	ldd	r25, Y+5	; 0x05
    17de:	82 30       	cpi	r24, 0x02	; 2
    17e0:	91 05       	cpc	r25, r1
    17e2:	34 f4       	brge	.+12     	; 0x17f0 <MDIO_u8GetPinValue+0x50>
    17e4:	2c 81       	ldd	r18, Y+4	; 0x04
    17e6:	3d 81       	ldd	r19, Y+5	; 0x05
    17e8:	21 15       	cp	r18, r1
    17ea:	31 05       	cpc	r19, r1
    17ec:	61 f0       	breq	.+24     	; 0x1806 <MDIO_u8GetPinValue+0x66>
    17ee:	52 c0       	rjmp	.+164    	; 0x1894 <MDIO_u8GetPinValue+0xf4>
    17f0:	4c 81       	ldd	r20, Y+4	; 0x04
    17f2:	5d 81       	ldd	r21, Y+5	; 0x05
    17f4:	42 30       	cpi	r20, 0x02	; 2
    17f6:	51 05       	cpc	r21, r1
    17f8:	51 f1       	breq	.+84     	; 0x184e <MDIO_u8GetPinValue+0xae>
    17fa:	8c 81       	ldd	r24, Y+4	; 0x04
    17fc:	9d 81       	ldd	r25, Y+5	; 0x05
    17fe:	83 30       	cpi	r24, 0x03	; 3
    1800:	91 05       	cpc	r25, r1
    1802:	b9 f1       	breq	.+110    	; 0x1872 <MDIO_u8GetPinValue+0xd2>
    1804:	47 c0       	rjmp	.+142    	; 0x1894 <MDIO_u8GetPinValue+0xf4>
				{
					case PortA:

						local_u8Pin_Direction=Get_Bit(DIO_PINA_REG,A_u8PinNo);
    1806:	e9 e3       	ldi	r30, 0x39	; 57
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	88 2f       	mov	r24, r24
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	a9 01       	movw	r20, r18
    1818:	02 c0       	rjmp	.+4      	; 0x181e <MDIO_u8GetPinValue+0x7e>
    181a:	55 95       	asr	r21
    181c:	47 95       	ror	r20
    181e:	8a 95       	dec	r24
    1820:	e2 f7       	brpl	.-8      	; 0x181a <MDIO_u8GetPinValue+0x7a>
    1822:	ca 01       	movw	r24, r20
    1824:	81 70       	andi	r24, 0x01	; 1
    1826:	89 83       	std	Y+1, r24	; 0x01
    1828:	35 c0       	rjmp	.+106    	; 0x1894 <MDIO_u8GetPinValue+0xf4>
						break;

					case PortB:

						local_u8Pin_Direction=Get_Bit(DIO_PINB_REG,A_u8PinNo);
    182a:	e6 e3       	ldi	r30, 0x36	; 54
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	88 2f       	mov	r24, r24
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	a9 01       	movw	r20, r18
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <MDIO_u8GetPinValue+0xa2>
    183e:	55 95       	asr	r21
    1840:	47 95       	ror	r20
    1842:	8a 95       	dec	r24
    1844:	e2 f7       	brpl	.-8      	; 0x183e <MDIO_u8GetPinValue+0x9e>
    1846:	ca 01       	movw	r24, r20
    1848:	81 70       	andi	r24, 0x01	; 1
    184a:	89 83       	std	Y+1, r24	; 0x01
    184c:	23 c0       	rjmp	.+70     	; 0x1894 <MDIO_u8GetPinValue+0xf4>
						break;

					case PortC:

						local_u8Pin_Direction=Get_Bit(DIO_PINC_REG,A_u8PinNo);
    184e:	e3 e3       	ldi	r30, 0x33	; 51
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	88 2f       	mov	r24, r24
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	a9 01       	movw	r20, r18
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <MDIO_u8GetPinValue+0xc6>
    1862:	55 95       	asr	r21
    1864:	47 95       	ror	r20
    1866:	8a 95       	dec	r24
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <MDIO_u8GetPinValue+0xc2>
    186a:	ca 01       	movw	r24, r20
    186c:	81 70       	andi	r24, 0x01	; 1
    186e:	89 83       	std	Y+1, r24	; 0x01
    1870:	11 c0       	rjmp	.+34     	; 0x1894 <MDIO_u8GetPinValue+0xf4>
						break;

					case PortD:

						local_u8Pin_Direction=Get_Bit(DIO_PIND_REG,A_u8PinNo);
    1872:	e0 e3       	ldi	r30, 0x30	; 48
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	88 2f       	mov	r24, r24
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	a9 01       	movw	r20, r18
    1884:	02 c0       	rjmp	.+4      	; 0x188a <MDIO_u8GetPinValue+0xea>
    1886:	55 95       	asr	r21
    1888:	47 95       	ror	r20
    188a:	8a 95       	dec	r24
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <MDIO_u8GetPinValue+0xe6>
    188e:	ca 01       	movw	r24, r20
    1890:	81 70       	andi	r24, 0x01	; 1
    1892:	89 83       	std	Y+1, r24	; 0x01
        #if A_u8PinNo<0 || A_u8PinNo>7
		#error Undefined PIN number
		#endif

	}
	return local_u8Pin_Direction;
    1894:	89 81       	ldd	r24, Y+1	; 0x01
}
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <MDIO_voidSetPortDirection>:

void MDIO_voidSetPortDirection(u8 A_u8PortNo,u8 A_u8PortDirection)
{
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <MDIO_voidSetPortDirection+0x6>
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <MDIO_voidSetPortDirection+0x8>
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	6a 83       	std	Y+2, r22	; 0x02
	if((A_u8PortNo <= PortD)){
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	84 30       	cpi	r24, 0x04	; 4
    18ba:	90 f5       	brcc	.+100    	; 0x1920 <MDIO_voidSetPortDirection+0x7a>

		switch(A_u8PortNo)
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	3c 83       	std	Y+4, r19	; 0x04
    18c4:	2b 83       	std	Y+3, r18	; 0x03
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ca:	81 30       	cpi	r24, 0x01	; 1
    18cc:	91 05       	cpc	r25, r1
    18ce:	d1 f0       	breq	.+52     	; 0x1904 <MDIO_voidSetPortDirection+0x5e>
    18d0:	2b 81       	ldd	r18, Y+3	; 0x03
    18d2:	3c 81       	ldd	r19, Y+4	; 0x04
    18d4:	22 30       	cpi	r18, 0x02	; 2
    18d6:	31 05       	cpc	r19, r1
    18d8:	2c f4       	brge	.+10     	; 0x18e4 <MDIO_voidSetPortDirection+0x3e>
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	9c 81       	ldd	r25, Y+4	; 0x04
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	61 f0       	breq	.+24     	; 0x18fa <MDIO_voidSetPortDirection+0x54>
    18e2:	1e c0       	rjmp	.+60     	; 0x1920 <MDIO_voidSetPortDirection+0x7a>
    18e4:	2b 81       	ldd	r18, Y+3	; 0x03
    18e6:	3c 81       	ldd	r19, Y+4	; 0x04
    18e8:	22 30       	cpi	r18, 0x02	; 2
    18ea:	31 05       	cpc	r19, r1
    18ec:	81 f0       	breq	.+32     	; 0x190e <MDIO_voidSetPortDirection+0x68>
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	9c 81       	ldd	r25, Y+4	; 0x04
    18f2:	83 30       	cpi	r24, 0x03	; 3
    18f4:	91 05       	cpc	r25, r1
    18f6:	81 f0       	breq	.+32     	; 0x1918 <MDIO_voidSetPortDirection+0x72>
    18f8:	13 c0       	rjmp	.+38     	; 0x1920 <MDIO_voidSetPortDirection+0x7a>
			{
				case PortA:

					DIO_DDRA_REG=A_u8PortDirection;
    18fa:	ea e3       	ldi	r30, 0x3A	; 58
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	80 83       	st	Z, r24
    1902:	0e c0       	rjmp	.+28     	; 0x1920 <MDIO_voidSetPortDirection+0x7a>
					break;

				case PortB:

					DIO_DDRB_REG=A_u8PortDirection;
    1904:	e7 e3       	ldi	r30, 0x37	; 55
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	80 83       	st	Z, r24
    190c:	09 c0       	rjmp	.+18     	; 0x1920 <MDIO_voidSetPortDirection+0x7a>
					break;

				case PortC:

					DIO_DDRC_REG=A_u8PortDirection;
    190e:	e4 e3       	ldi	r30, 0x34	; 52
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	80 83       	st	Z, r24
    1916:	04 c0       	rjmp	.+8      	; 0x1920 <MDIO_voidSetPortDirection+0x7a>
					break;

				case PortD:

					DIO_DDRD_REG=A_u8PortDirection;
    1918:	e1 e3       	ldi	r30, 0x31	; 49
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	80 83       	st	Z, r24
		#if A_u8PortNo!=PortA && A_u8PortNo!=PortB && A_u8PortNo!=PortC && A_u8PortNo!=PortD
		#error Undefined PORT
		#endif

	}
}
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(u8 A_u8PortNo,u8 A_u8PortValue)
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	00 d0       	rcall	.+0      	; 0x1934 <MDIO_voidSetPortValue+0x6>
    1934:	00 d0       	rcall	.+0      	; 0x1936 <MDIO_voidSetPortValue+0x8>
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	6a 83       	std	Y+2, r22	; 0x02
	if((A_u8PortNo <= PortD)){
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	84 30       	cpi	r24, 0x04	; 4
    1942:	90 f5       	brcc	.+100    	; 0x19a8 <MDIO_voidSetPortValue+0x7a>

		switch(A_u8PortNo)
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	3c 83       	std	Y+4, r19	; 0x04
    194c:	2b 83       	std	Y+3, r18	; 0x03
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	9c 81       	ldd	r25, Y+4	; 0x04
    1952:	81 30       	cpi	r24, 0x01	; 1
    1954:	91 05       	cpc	r25, r1
    1956:	d1 f0       	breq	.+52     	; 0x198c <MDIO_voidSetPortValue+0x5e>
    1958:	2b 81       	ldd	r18, Y+3	; 0x03
    195a:	3c 81       	ldd	r19, Y+4	; 0x04
    195c:	22 30       	cpi	r18, 0x02	; 2
    195e:	31 05       	cpc	r19, r1
    1960:	2c f4       	brge	.+10     	; 0x196c <MDIO_voidSetPortValue+0x3e>
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	00 97       	sbiw	r24, 0x00	; 0
    1968:	61 f0       	breq	.+24     	; 0x1982 <MDIO_voidSetPortValue+0x54>
    196a:	1e c0       	rjmp	.+60     	; 0x19a8 <MDIO_voidSetPortValue+0x7a>
    196c:	2b 81       	ldd	r18, Y+3	; 0x03
    196e:	3c 81       	ldd	r19, Y+4	; 0x04
    1970:	22 30       	cpi	r18, 0x02	; 2
    1972:	31 05       	cpc	r19, r1
    1974:	81 f0       	breq	.+32     	; 0x1996 <MDIO_voidSetPortValue+0x68>
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	9c 81       	ldd	r25, Y+4	; 0x04
    197a:	83 30       	cpi	r24, 0x03	; 3
    197c:	91 05       	cpc	r25, r1
    197e:	81 f0       	breq	.+32     	; 0x19a0 <MDIO_voidSetPortValue+0x72>
    1980:	13 c0       	rjmp	.+38     	; 0x19a8 <MDIO_voidSetPortValue+0x7a>
			{
				case PortA:

					DIO_PORTA_REG=A_u8PortValue;
    1982:	eb e3       	ldi	r30, 0x3B	; 59
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	80 83       	st	Z, r24
    198a:	0e c0       	rjmp	.+28     	; 0x19a8 <MDIO_voidSetPortValue+0x7a>
					break;

				case PortB:

					DIO_PORTB_REG=A_u8PortValue;
    198c:	e8 e3       	ldi	r30, 0x38	; 56
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	80 83       	st	Z, r24
    1994:	09 c0       	rjmp	.+18     	; 0x19a8 <MDIO_voidSetPortValue+0x7a>
					break;

				case PortC:

					DIO_PORTC_REG=A_u8PortValue;
    1996:	e5 e3       	ldi	r30, 0x35	; 53
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	80 83       	st	Z, r24
    199e:	04 c0       	rjmp	.+8      	; 0x19a8 <MDIO_voidSetPortValue+0x7a>
					break;

				case PortD:

					DIO_PORTD_REG=A_u8PortValue;
    19a0:	e2 e3       	ldi	r30, 0x32	; 50
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	80 83       	st	Z, r24
	{
		#if A_u8PortNo!=PortA && A_u8PortNo!=PortB && A_u8PortNo!=PortC && A_u8PortNo!=PortD
		#error Undefined PORT
		#endif
	}
}
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	08 95       	ret

000019b6 <MDAC_voidinit>:


void (*ADC_callback)(void);

void MDAC_voidinit()
{
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
	//reference voltage
	#if ADC_ref_volt == AVCC
		Clr_Bit(ADMUX, REFS1);
    19be:	a7 e2       	ldi	r26, 0x27	; 39
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	e7 e2       	ldi	r30, 0x27	; 39
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	8f 77       	andi	r24, 0x7F	; 127
    19ca:	8c 93       	st	X, r24
		Set_Bit(ADMUX, REFS0);
    19cc:	a7 e2       	ldi	r26, 0x27	; 39
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	e7 e2       	ldi	r30, 0x27	; 39
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	80 64       	ori	r24, 0x40	; 64
    19d8:	8c 93       	st	X, r24
	#else
	#error "error wrong reference"
	#endif

	//data adjustment
	Clr_Bit(ADMUX,ADLAR);
    19da:	a7 e2       	ldi	r26, 0x27	; 39
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e7 e2       	ldi	r30, 0x27	; 39
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	8f 7d       	andi	r24, 0xDF	; 223
    19e6:	8c 93       	st	X, r24

	//auto trigger enable
	ADCSRA = (ADCSRA & 0xF8) | ADC_PS_64;
    19e8:	a6 e2       	ldi	r26, 0x26	; 38
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e6 e2       	ldi	r30, 0x26	; 38
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	88 7f       	andi	r24, 0xF8	; 248
    19f4:	86 60       	ori	r24, 0x06	; 6
    19f6:	8c 93       	st	X, r24

	//interrupt enable/disable
	#if ADC_interrupt_enable== DISABLE
		Clr_Bit(ADCSRA, ADIE);
	#elif ADC_interrupt_enable== ENABLE
		Set_Bit(ADCSRA, ADIE);
    19f8:	a6 e2       	ldi	r26, 0x26	; 38
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e6 e2       	ldi	r30, 0x26	; 38
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	88 60       	ori	r24, 0x08	; 8
    1a04:	8c 93       	st	X, r24
	#else
	#error "error wrong Mode"
	#endif

	//enable ADC
	Set_Bit(ADCSRA,ADEN);
    1a06:	a6 e2       	ldi	r26, 0x26	; 38
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e6 e2       	ldi	r30, 0x26	; 38
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	80 68       	ori	r24, 0x80	; 128
    1a12:	8c 93       	st	X, r24
}
    1a14:	cf 91       	pop	r28
    1a16:	df 91       	pop	r29
    1a18:	08 95       	ret

00001a1a <MADC_u16analog_read>:

u16 MADC_u16analog_read(u8 A_u8channelno)
{
    1a1a:	df 93       	push	r29
    1a1c:	cf 93       	push	r28
    1a1e:	00 d0       	rcall	.+0      	; 0x1a20 <MADC_u16analog_read+0x6>
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	89 83       	std	Y+1, r24	; 0x01
	//select channel
	ADMUX = (ADMUX & 0xE0) | (A_u8channelno & 0x07);
    1a26:	a7 e2       	ldi	r26, 0x27	; 39
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e7 e2       	ldi	r30, 0x27	; 39
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	98 2f       	mov	r25, r24
    1a32:	90 7e       	andi	r25, 0xE0	; 224
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	87 70       	andi	r24, 0x07	; 7
    1a38:	89 2b       	or	r24, r25
    1a3a:	8c 93       	st	X, r24

	//start conversion
	Set_Bit(ADCSRA,ADSC);
    1a3c:	a6 e2       	ldi	r26, 0x26	; 38
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	e6 e2       	ldi	r30, 0x26	; 38
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	80 64       	ori	r24, 0x40	; 64
    1a48:	8c 93       	st	X, r24

	//poll on flag
	while(Get_Bit(ADCSRA,ADIF) != 1);
    1a4a:	e6 e2       	ldi	r30, 0x26	; 38
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z

	//clear flag
	Clr_Bit(ADCSRA,ADIF);
    1a50:	a6 e2       	ldi	r26, 0x26	; 38
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e6 e2       	ldi	r30, 0x26	; 38
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	8f 7e       	andi	r24, 0xEF	; 239
    1a5c:	8c 93       	st	X, r24

	return ADC;
    1a5e:	e4 e2       	ldi	r30, 0x24	; 36
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	88 2f       	mov	r24, r24
    1a66:	90 e0       	ldi	r25, 0x00	; 0
}
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	cf 91       	pop	r28
    1a6e:	df 91       	pop	r29
    1a70:	08 95       	ret

00001a72 <MADC_voidstart_conversion>:

void MADC_voidstart_conversion (u8 A_u8channelno)
{
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	0f 92       	push	r0
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	89 83       	std	Y+1, r24	; 0x01
	//select channel
	ADMUX = (ADMUX & 0xE0) | (A_u8channelno & 0x07);
    1a7e:	a7 e2       	ldi	r26, 0x27	; 39
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e7 e2       	ldi	r30, 0x27	; 39
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	98 2f       	mov	r25, r24
    1a8a:	90 7e       	andi	r25, 0xE0	; 224
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	87 70       	andi	r24, 0x07	; 7
    1a90:	89 2b       	or	r24, r25
    1a92:	8c 93       	st	X, r24

	//start conversion
	Set_Bit(ADCSRA,ADSC);
    1a94:	a6 e2       	ldi	r26, 0x26	; 38
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e6 e2       	ldi	r30, 0x26	; 38
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	80 64       	ori	r24, 0x40	; 64
    1aa0:	8c 93       	st	X, r24
}
    1aa2:	0f 90       	pop	r0
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <MADC_u16get_ADC_data>:
u16  MADC_u16get_ADC_data(void)
{
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
	return ADC;
    1ab2:	e4 e2       	ldi	r30, 0x24	; 36
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	88 2f       	mov	r24, r24
    1aba:	90 e0       	ldi	r25, 0x00	; 0
}
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	08 95       	ret

00001ac2 <MADC_voidset_callback>:

void MADC_voidset_callback 	  (void (*A_FuncPtr)(void))
{
    1ac2:	df 93       	push	r29
    1ac4:	cf 93       	push	r28
    1ac6:	00 d0       	rcall	.+0      	; 0x1ac8 <MADC_voidset_callback+0x6>
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	9a 83       	std	Y+2, r25	; 0x02
    1ace:	89 83       	std	Y+1, r24	; 0x01
	ADC_callback=A_FuncPtr;
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad4:	90 93 7a 00 	sts	0x007A, r25
    1ad8:	80 93 79 00 	sts	0x0079, r24
}
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <__vector_16>:

void __vector_16(void) 		__attribute__((signal));

void __vector_16(void){
    1ae6:	1f 92       	push	r1
    1ae8:	0f 92       	push	r0
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	0f 92       	push	r0
    1aee:	11 24       	eor	r1, r1
    1af0:	2f 93       	push	r18
    1af2:	3f 93       	push	r19
    1af4:	4f 93       	push	r20
    1af6:	5f 93       	push	r21
    1af8:	6f 93       	push	r22
    1afa:	7f 93       	push	r23
    1afc:	8f 93       	push	r24
    1afe:	9f 93       	push	r25
    1b00:	af 93       	push	r26
    1b02:	bf 93       	push	r27
    1b04:	ef 93       	push	r30
    1b06:	ff 93       	push	r31
    1b08:	df 93       	push	r29
    1b0a:	cf 93       	push	r28
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62

	ADC_callback();
    1b10:	e0 91 79 00 	lds	r30, 0x0079
    1b14:	f0 91 7a 00 	lds	r31, 0x007A
    1b18:	09 95       	icall
}
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	ff 91       	pop	r31
    1b20:	ef 91       	pop	r30
    1b22:	bf 91       	pop	r27
    1b24:	af 91       	pop	r26
    1b26:	9f 91       	pop	r25
    1b28:	8f 91       	pop	r24
    1b2a:	7f 91       	pop	r23
    1b2c:	6f 91       	pop	r22
    1b2e:	5f 91       	pop	r21
    1b30:	4f 91       	pop	r20
    1b32:	3f 91       	pop	r19
    1b34:	2f 91       	pop	r18
    1b36:	0f 90       	pop	r0
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	0f 90       	pop	r0
    1b3c:	1f 90       	pop	r1
    1b3e:	18 95       	reti

00001b40 <toggle>:
#define TIMER2 2

volatile u8 flag=0;

void toggle()
{
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
    1b48:	60 97       	sbiw	r28, 0x10	; 16
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	de bf       	out	0x3e, r29	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	cd bf       	out	0x3d, r28	; 61

	for(u8 i=0; i<=255; i++)
    1b54:	18 8a       	std	Y+16, r1	; 0x10
	{
		MTIMERS_voidset_compare_value(TIMER0, i);
    1b56:	88 89       	ldd	r24, Y+16	; 0x10
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	b9 01       	movw	r22, r18
    1b60:	0e 94 b1 07 	call	0xf62	; 0xf62 <MTIMERS_voidset_compare_value>
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	a8 ec       	ldi	r26, 0xC8	; 200
    1b6a:	b2 e4       	ldi	r27, 0x42	; 66
    1b6c:	8b 87       	std	Y+11, r24	; 0x0b
    1b6e:	9c 87       	std	Y+12, r25	; 0x0c
    1b70:	ad 87       	std	Y+13, r26	; 0x0d
    1b72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	4a e7       	ldi	r20, 0x7A	; 122
    1b82:	53 e4       	ldi	r21, 0x43	; 67
    1b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	8f 83       	std	Y+7, r24	; 0x07
    1b8e:	98 87       	std	Y+8, r25	; 0x08
    1b90:	a9 87       	std	Y+9, r26	; 0x09
    1b92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b94:	6f 81       	ldd	r22, Y+7	; 0x07
    1b96:	78 85       	ldd	r23, Y+8	; 0x08
    1b98:	89 85       	ldd	r24, Y+9	; 0x09
    1b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e8       	ldi	r20, 0x80	; 128
    1ba2:	5f e3       	ldi	r21, 0x3F	; 63
    1ba4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba8:	88 23       	and	r24, r24
    1baa:	2c f4       	brge	.+10     	; 0x1bb6 <toggle+0x76>
		__ticks = 1;
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	9e 83       	std	Y+6, r25	; 0x06
    1bb2:	8d 83       	std	Y+5, r24	; 0x05
    1bb4:	3f c0       	rjmp	.+126    	; 0x1c34 <toggle+0xf4>
	else if (__tmp > 65535)
    1bb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb8:	78 85       	ldd	r23, Y+8	; 0x08
    1bba:	89 85       	ldd	r24, Y+9	; 0x09
    1bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	3f ef       	ldi	r19, 0xFF	; 255
    1bc2:	4f e7       	ldi	r20, 0x7F	; 127
    1bc4:	57 e4       	ldi	r21, 0x47	; 71
    1bc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bca:	18 16       	cp	r1, r24
    1bcc:	4c f5       	brge	.+82     	; 0x1c20 <toggle+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bce:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e2       	ldi	r20, 0x20	; 32
    1bdc:	51 e4       	ldi	r21, 0x41	; 65
    1bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	bc 01       	movw	r22, r24
    1be8:	cd 01       	movw	r24, r26
    1bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	9e 83       	std	Y+6, r25	; 0x06
    1bf4:	8d 83       	std	Y+5, r24	; 0x05
    1bf6:	0f c0       	rjmp	.+30     	; 0x1c16 <toggle+0xd6>
    1bf8:	89 e1       	ldi	r24, 0x19	; 25
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	9c 83       	std	Y+4, r25	; 0x04
    1bfe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	9c 81       	ldd	r25, Y+4	; 0x04
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	f1 f7       	brne	.-4      	; 0x1c04 <toggle+0xc4>
    1c08:	9c 83       	std	Y+4, r25	; 0x04
    1c0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	9e 83       	std	Y+6, r25	; 0x06
    1c14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c16:	8d 81       	ldd	r24, Y+5	; 0x05
    1c18:	9e 81       	ldd	r25, Y+6	; 0x06
    1c1a:	00 97       	sbiw	r24, 0x00	; 0
    1c1c:	69 f7       	brne	.-38     	; 0x1bf8 <toggle+0xb8>
    1c1e:	14 c0       	rjmp	.+40     	; 0x1c48 <toggle+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c20:	6f 81       	ldd	r22, Y+7	; 0x07
    1c22:	78 85       	ldd	r23, Y+8	; 0x08
    1c24:	89 85       	ldd	r24, Y+9	; 0x09
    1c26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	9e 83       	std	Y+6, r25	; 0x06
    1c32:	8d 83       	std	Y+5, r24	; 0x05
    1c34:	8d 81       	ldd	r24, Y+5	; 0x05
    1c36:	9e 81       	ldd	r25, Y+6	; 0x06
    1c38:	9a 83       	std	Y+2, r25	; 0x02
    1c3a:	89 83       	std	Y+1, r24	; 0x01
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <toggle+0x100>
    1c44:	9a 83       	std	Y+2, r25	; 0x02
    1c46:	89 83       	std	Y+1, r24	; 0x01
volatile u8 flag=0;

void toggle()
{

	for(u8 i=0; i<=255; i++)
    1c48:	88 89       	ldd	r24, Y+16	; 0x10
    1c4a:	8f 5f       	subi	r24, 0xFF	; 255
    1c4c:	88 8b       	std	Y+16, r24	; 0x10
    1c4e:	83 cf       	rjmp	.-250    	; 0x1b56 <toggle+0x16>

00001c50 <toggle_servo>:
		_delay_ms(100);
	}
}

void toggle_servo()
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	a4 97       	sbiw	r28, 0x24	; 36
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
	MTIMERS_voidinit(TIMER1);
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	0e 94 2d 07 	call	0xe5a	; 0xe5a <MTIMERS_voidinit>
	// Calculate OCR1A values for 0 and 180 degrees
	  uint16_t ocr_0_deg = 1000;   // Replace with the appropriate value
    1c6a:	88 ee       	ldi	r24, 0xE8	; 232
    1c6c:	93 e0       	ldi	r25, 0x03	; 3
    1c6e:	9c a3       	std	Y+36, r25	; 0x24
    1c70:	8b a3       	std	Y+35, r24	; 0x23
	  uint16_t ocr_180_deg = 2000; // Replace with the appropriate value
    1c72:	80 ed       	ldi	r24, 0xD0	; 208
    1c74:	97 e0       	ldi	r25, 0x07	; 7
    1c76:	9a a3       	std	Y+34, r25	; 0x22
    1c78:	89 a3       	std	Y+33, r24	; 0x21

	  // Move from 0 to 180 degrees
	  for (u16 ocr = ocr_0_deg; ocr <= ocr_180_deg; ocr++) {
    1c7a:	8b a1       	ldd	r24, Y+35	; 0x23
    1c7c:	9c a1       	ldd	r25, Y+36	; 0x24
    1c7e:	98 a3       	std	Y+32, r25	; 0x20
    1c80:	8f 8f       	std	Y+31, r24	; 0x1f
    1c82:	7d c0       	rjmp	.+250    	; 0x1d7e <toggle_servo+0x12e>
		 MTIMERS_voidset_compare_value(TIMER1, ocr);         // Update the OCR1A value
    1c84:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1c86:	38 a1       	ldd	r19, Y+32	; 0x20
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	b9 01       	movw	r22, r18
    1c8c:	0e 94 b1 07 	call	0xf62	; 0xf62 <MTIMERS_voidset_compare_value>
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	a0 e2       	ldi	r26, 0x20	; 32
    1c96:	b1 e4       	ldi	r27, 0x41	; 65
    1c98:	89 8f       	std	Y+25, r24	; 0x19
    1c9a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c9c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c9e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ca2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ca4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ca6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	4a e7       	ldi	r20, 0x7A	; 122
    1cae:	53 e4       	ldi	r21, 0x43	; 67
    1cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	8d 8b       	std	Y+21, r24	; 0x15
    1cba:	9e 8b       	std	Y+22, r25	; 0x16
    1cbc:	af 8b       	std	Y+23, r26	; 0x17
    1cbe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cc0:	6d 89       	ldd	r22, Y+21	; 0x15
    1cc2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cc4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cc6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e8       	ldi	r20, 0x80	; 128
    1cce:	5f e3       	ldi	r21, 0x3F	; 63
    1cd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd4:	88 23       	and	r24, r24
    1cd6:	2c f4       	brge	.+10     	; 0x1ce2 <toggle_servo+0x92>
		__ticks = 1;
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	9c 8b       	std	Y+20, r25	; 0x14
    1cde:	8b 8b       	std	Y+19, r24	; 0x13
    1ce0:	3f c0       	rjmp	.+126    	; 0x1d60 <toggle_servo+0x110>
	else if (__tmp > 65535)
    1ce2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	3f ef       	ldi	r19, 0xFF	; 255
    1cee:	4f e7       	ldi	r20, 0x7F	; 127
    1cf0:	57 e4       	ldi	r21, 0x47	; 71
    1cf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cf6:	18 16       	cp	r1, r24
    1cf8:	4c f5       	brge	.+82     	; 0x1d4c <toggle_servo+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfa:	69 8d       	ldd	r22, Y+25	; 0x19
    1cfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e2       	ldi	r20, 0x20	; 32
    1d08:	51 e4       	ldi	r21, 0x41	; 65
    1d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	bc 01       	movw	r22, r24
    1d14:	cd 01       	movw	r24, r26
    1d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	9c 8b       	std	Y+20, r25	; 0x14
    1d20:	8b 8b       	std	Y+19, r24	; 0x13
    1d22:	0f c0       	rjmp	.+30     	; 0x1d42 <toggle_servo+0xf2>
    1d24:	89 e1       	ldi	r24, 0x19	; 25
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	9a 8b       	std	Y+18, r25	; 0x12
    1d2a:	89 8b       	std	Y+17, r24	; 0x11
    1d2c:	89 89       	ldd	r24, Y+17	; 0x11
    1d2e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	f1 f7       	brne	.-4      	; 0x1d30 <toggle_servo+0xe0>
    1d34:	9a 8b       	std	Y+18, r25	; 0x12
    1d36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d38:	8b 89       	ldd	r24, Y+19	; 0x13
    1d3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	9c 8b       	std	Y+20, r25	; 0x14
    1d40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d42:	8b 89       	ldd	r24, Y+19	; 0x13
    1d44:	9c 89       	ldd	r25, Y+20	; 0x14
    1d46:	00 97       	sbiw	r24, 0x00	; 0
    1d48:	69 f7       	brne	.-38     	; 0x1d24 <toggle_servo+0xd4>
    1d4a:	14 c0       	rjmp	.+40     	; 0x1d74 <toggle_servo+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d50:	8f 89       	ldd	r24, Y+23	; 0x17
    1d52:	98 8d       	ldd	r25, Y+24	; 0x18
    1d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	9c 8b       	std	Y+20, r25	; 0x14
    1d5e:	8b 8b       	std	Y+19, r24	; 0x13
    1d60:	8b 89       	ldd	r24, Y+19	; 0x13
    1d62:	9c 89       	ldd	r25, Y+20	; 0x14
    1d64:	98 8b       	std	Y+16, r25	; 0x10
    1d66:	8f 87       	std	Y+15, r24	; 0x0f
    1d68:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d6a:	98 89       	ldd	r25, Y+16	; 0x10
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	f1 f7       	brne	.-4      	; 0x1d6c <toggle_servo+0x11c>
    1d70:	98 8b       	std	Y+16, r25	; 0x10
    1d72:	8f 87       	std	Y+15, r24	; 0x0f
	// Calculate OCR1A values for 0 and 180 degrees
	  uint16_t ocr_0_deg = 1000;   // Replace with the appropriate value
	  uint16_t ocr_180_deg = 2000; // Replace with the appropriate value

	  // Move from 0 to 180 degrees
	  for (u16 ocr = ocr_0_deg; ocr <= ocr_180_deg; ocr++) {
    1d74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d76:	98 a1       	ldd	r25, Y+32	; 0x20
    1d78:	01 96       	adiw	r24, 0x01	; 1
    1d7a:	98 a3       	std	Y+32, r25	; 0x20
    1d7c:	8f 8f       	std	Y+31, r24	; 0x1f
    1d7e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1d80:	38 a1       	ldd	r19, Y+32	; 0x20
    1d82:	89 a1       	ldd	r24, Y+33	; 0x21
    1d84:	9a a1       	ldd	r25, Y+34	; 0x22
    1d86:	82 17       	cp	r24, r18
    1d88:	93 07       	cpc	r25, r19
    1d8a:	08 f0       	brcs	.+2      	; 0x1d8e <toggle_servo+0x13e>
    1d8c:	7b cf       	rjmp	.-266    	; 0x1c84 <toggle_servo+0x34>
		 MTIMERS_voidset_compare_value(TIMER1, ocr);         // Update the OCR1A value
	    _delay_ms(10);       // Delay to control the speed of the sweeping motion
	  }

	  // Move from 180 to 0 degrees
	  for (u16 ocr = ocr_180_deg; ocr >= ocr_0_deg; ocr--) {
    1d8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d90:	9a a1       	ldd	r25, Y+34	; 0x22
    1d92:	9e 8f       	std	Y+30, r25	; 0x1e
    1d94:	8d 8f       	std	Y+29, r24	; 0x1d
    1d96:	7d c0       	rjmp	.+250    	; 0x1e92 <toggle_servo+0x242>
		 MTIMERS_voidset_compare_value(TIMER1, ocr);          // Update the OCR1A value
    1d98:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1d9a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	b9 01       	movw	r22, r18
    1da0:	0e 94 b1 07 	call	0xf62	; 0xf62 <MTIMERS_voidset_compare_value>
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	a0 e2       	ldi	r26, 0x20	; 32
    1daa:	b1 e4       	ldi	r27, 0x41	; 65
    1dac:	8b 87       	std	Y+11, r24	; 0x0b
    1dae:	9c 87       	std	Y+12, r25	; 0x0c
    1db0:	ad 87       	std	Y+13, r26	; 0x0d
    1db2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	4a e7       	ldi	r20, 0x7A	; 122
    1dc2:	53 e4       	ldi	r21, 0x43	; 67
    1dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	8f 83       	std	Y+7, r24	; 0x07
    1dce:	98 87       	std	Y+8, r25	; 0x08
    1dd0:	a9 87       	std	Y+9, r26	; 0x09
    1dd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd6:	78 85       	ldd	r23, Y+8	; 0x08
    1dd8:	89 85       	ldd	r24, Y+9	; 0x09
    1dda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e8       	ldi	r20, 0x80	; 128
    1de2:	5f e3       	ldi	r21, 0x3F	; 63
    1de4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1de8:	88 23       	and	r24, r24
    1dea:	2c f4       	brge	.+10     	; 0x1df6 <toggle_servo+0x1a6>
		__ticks = 1;
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	9e 83       	std	Y+6, r25	; 0x06
    1df2:	8d 83       	std	Y+5, r24	; 0x05
    1df4:	3f c0       	rjmp	.+126    	; 0x1e74 <toggle_servo+0x224>
	else if (__tmp > 65535)
    1df6:	6f 81       	ldd	r22, Y+7	; 0x07
    1df8:	78 85       	ldd	r23, Y+8	; 0x08
    1dfa:	89 85       	ldd	r24, Y+9	; 0x09
    1dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	3f ef       	ldi	r19, 0xFF	; 255
    1e02:	4f e7       	ldi	r20, 0x7F	; 127
    1e04:	57 e4       	ldi	r21, 0x47	; 71
    1e06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e0a:	18 16       	cp	r1, r24
    1e0c:	4c f5       	brge	.+82     	; 0x1e60 <toggle_servo+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	40 e2       	ldi	r20, 0x20	; 32
    1e1c:	51 e4       	ldi	r21, 0x41	; 65
    1e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	bc 01       	movw	r22, r24
    1e28:	cd 01       	movw	r24, r26
    1e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	9e 83       	std	Y+6, r25	; 0x06
    1e34:	8d 83       	std	Y+5, r24	; 0x05
    1e36:	0f c0       	rjmp	.+30     	; 0x1e56 <toggle_servo+0x206>
    1e38:	89 e1       	ldi	r24, 0x19	; 25
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	9c 83       	std	Y+4, r25	; 0x04
    1e3e:	8b 83       	std	Y+3, r24	; 0x03
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	9c 81       	ldd	r25, Y+4	; 0x04
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <toggle_servo+0x1f4>
    1e48:	9c 83       	std	Y+4, r25	; 0x04
    1e4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	9e 83       	std	Y+6, r25	; 0x06
    1e54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e56:	8d 81       	ldd	r24, Y+5	; 0x05
    1e58:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	69 f7       	brne	.-38     	; 0x1e38 <toggle_servo+0x1e8>
    1e5e:	14 c0       	rjmp	.+40     	; 0x1e88 <toggle_servo+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e60:	6f 81       	ldd	r22, Y+7	; 0x07
    1e62:	78 85       	ldd	r23, Y+8	; 0x08
    1e64:	89 85       	ldd	r24, Y+9	; 0x09
    1e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	9e 83       	std	Y+6, r25	; 0x06
    1e72:	8d 83       	std	Y+5, r24	; 0x05
    1e74:	8d 81       	ldd	r24, Y+5	; 0x05
    1e76:	9e 81       	ldd	r25, Y+6	; 0x06
    1e78:	9a 83       	std	Y+2, r25	; 0x02
    1e7a:	89 83       	std	Y+1, r24	; 0x01
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <toggle_servo+0x230>
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	89 83       	std	Y+1, r24	; 0x01
		 MTIMERS_voidset_compare_value(TIMER1, ocr);         // Update the OCR1A value
	    _delay_ms(10);       // Delay to control the speed of the sweeping motion
	  }

	  // Move from 180 to 0 degrees
	  for (u16 ocr = ocr_180_deg; ocr >= ocr_0_deg; ocr--) {
    1e88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e8a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	9e 8f       	std	Y+30, r25	; 0x1e
    1e90:	8d 8f       	std	Y+29, r24	; 0x1d
    1e92:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1e94:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1e96:	8b a1       	ldd	r24, Y+35	; 0x23
    1e98:	9c a1       	ldd	r25, Y+36	; 0x24
    1e9a:	28 17       	cp	r18, r24
    1e9c:	39 07       	cpc	r19, r25
    1e9e:	08 f0       	brcs	.+2      	; 0x1ea2 <toggle_servo+0x252>
    1ea0:	7b cf       	rjmp	.-266    	; 0x1d98 <toggle_servo+0x148>
		 MTIMERS_voidset_compare_value(TIMER1, ocr);          // Update the OCR1A value
	    _delay_ms(10);       // Delay to control the speed of the sweeping motion
	  }
}
    1ea2:	a4 96       	adiw	r28, 0x24	; 36
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	f8 94       	cli
    1ea8:	de bf       	out	0x3e, r29	; 62
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	cd bf       	out	0x3d, r28	; 61
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <main>:
void main()
{
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinDirection(PortB,PIN3,output);
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	63 e0       	ldi	r22, 0x03	; 3
    1ec0:	41 e0       	ldi	r20, 0x01	; 1
    1ec2:	0e 94 8c 09 	call	0x1318	; 0x1318 <MDIO_voidSetPinDirection>
	MTIMERS_voidinit(TIMER0);
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	0e 94 2d 07 	call	0xe5a	; 0xe5a <MTIMERS_voidinit>
	MTIMERS_voidStart(TIMER0);
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	0e 94 53 08 	call	0x10a6	; 0x10a6 <MTIMERS_voidStart>
	MTIMERS_voidPreload_value(TIMER0,224);
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	60 ee       	ldi	r22, 0xE0	; 224
    1ed6:	70 e0       	ldi	r23, 0x00	; 0
    1ed8:	0e 94 1e 08 	call	0x103c	; 0x103c <MTIMERS_voidPreload_value>
	MTIMERS_voidSet_intervals_CTC(TIMER0,2000,64,toggle);
    1edc:	20 ea       	ldi	r18, 0xA0	; 160
    1ede:	3d e0       	ldi	r19, 0x0D	; 13
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	60 ed       	ldi	r22, 0xD0	; 208
    1ee4:	77 e0       	ldi	r23, 0x07	; 7
    1ee6:	40 e4       	ldi	r20, 0x40	; 64
    1ee8:	50 e0       	ldi	r21, 0x00	; 0
    1eea:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <MTIMERS_voidSet_intervals_CTC>


	MDIO_voidSetPinDirection(PortD,PIN5,output);
    1eee:	83 e0       	ldi	r24, 0x03	; 3
    1ef0:	65 e0       	ldi	r22, 0x05	; 5
    1ef2:	41 e0       	ldi	r20, 0x01	; 1
    1ef4:	0e 94 8c 09 	call	0x1318	; 0x1318 <MDIO_voidSetPinDirection>
	MTIMERS_voidStart(TIMER1);
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	0e 94 53 08 	call	0x10a6	; 0x10a6 <MTIMERS_voidStart>


	while(1)
	{
		toggle_servo();
    1efe:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <toggle_servo>
    1f02:	fd cf       	rjmp	.-6      	; 0x1efe <main+0x4a>

00001f04 <__prologue_saves__>:
    1f04:	2f 92       	push	r2
    1f06:	3f 92       	push	r3
    1f08:	4f 92       	push	r4
    1f0a:	5f 92       	push	r5
    1f0c:	6f 92       	push	r6
    1f0e:	7f 92       	push	r7
    1f10:	8f 92       	push	r8
    1f12:	9f 92       	push	r9
    1f14:	af 92       	push	r10
    1f16:	bf 92       	push	r11
    1f18:	cf 92       	push	r12
    1f1a:	df 92       	push	r13
    1f1c:	ef 92       	push	r14
    1f1e:	ff 92       	push	r15
    1f20:	0f 93       	push	r16
    1f22:	1f 93       	push	r17
    1f24:	cf 93       	push	r28
    1f26:	df 93       	push	r29
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	ca 1b       	sub	r28, r26
    1f2e:	db 0b       	sbc	r29, r27
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	09 94       	ijmp

00001f3c <__epilogue_restores__>:
    1f3c:	2a 88       	ldd	r2, Y+18	; 0x12
    1f3e:	39 88       	ldd	r3, Y+17	; 0x11
    1f40:	48 88       	ldd	r4, Y+16	; 0x10
    1f42:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f44:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f46:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f48:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f4a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f4c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f4e:	b9 84       	ldd	r11, Y+9	; 0x09
    1f50:	c8 84       	ldd	r12, Y+8	; 0x08
    1f52:	df 80       	ldd	r13, Y+7	; 0x07
    1f54:	ee 80       	ldd	r14, Y+6	; 0x06
    1f56:	fd 80       	ldd	r15, Y+5	; 0x05
    1f58:	0c 81       	ldd	r16, Y+4	; 0x04
    1f5a:	1b 81       	ldd	r17, Y+3	; 0x03
    1f5c:	aa 81       	ldd	r26, Y+2	; 0x02
    1f5e:	b9 81       	ldd	r27, Y+1	; 0x01
    1f60:	ce 0f       	add	r28, r30
    1f62:	d1 1d       	adc	r29, r1
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	f8 94       	cli
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	cd bf       	out	0x3d, r28	; 61
    1f6e:	ed 01       	movw	r28, r26
    1f70:	08 95       	ret

00001f72 <_exit>:
    1f72:	f8 94       	cli

00001f74 <__stop_program>:
    1f74:	ff cf       	rjmp	.-2      	; 0x1f74 <__stop_program>
